package org.partiql.value;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import org.jetbrains.annotations.NotNull;
import org.partiql.value.datetime.Date;
import org.partiql.value.datetime.Time;
import org.partiql.value.datetime.Timestamp;

/**
 * Data representing a database result set, which is usually generated by executing a statement that queries the database.
 * <p>
 * A {@link PartiQLCursor} object maintains a cursor pointing to its current position in the underlying data. Initially the
 * cursor is positioned before the first value. The {@link #next()} method moves the cursor to the next value. Please use
 * {@link #hasNext()} before calling {@link #next()}.
 *
 * @see PartiQLValueLoader#load(PartiQLCursor)
 * @see PartiQLValue
 */
public interface PartiQLCursor extends AutoCloseable, Iterator<PartiQLValueType> {

    /**
     * Positions the reader just before the contents of the current value, which must be a container (list, bag,
     * sexp, or struct). There's no current value immediately after stepping in, so the next thing you'll want to do is call
     * {@link #hasNext()} and {@link #next()} to move onto the first child value.
     * <p>
     * If the container itself is the null value, stepIn() shall fail. Please use {@link #isNull()} before
     * invoking this.
     * <p>
     * At any time {@link #stepOut()} may be called to move the cursor back to (just after) the parent value, even if
     * there are more children remaining.
     */
    public void stepIn() throws UnsupportedOperationException, NullPointerException;

    /**
     * Positions the iterator after the current parent's value, moving up one level in the data hierarchy. There's no
     * current value immediately after stepping out, so the next thing you'll want to do is call {@link #hasNext()} and
     * {@link #next()} to move onto the following value.
     */
    public void stepOut() throws UnsupportedOperationException, NullPointerException;

    /**
     * Determines whether the current value is a null value of any type (for example, null or null.int). It should be
     * called before calling getters that return value types (int, long, boolean, double).
     */
    public boolean isNull();

    /**
     * Determines whether the current value is the missing value. Similarly, one can invoke {@link #getType()}.
     */
    public boolean isMissing();

    /**
     * @return the type of the data at the cursor.
     */
    @NotNull
    public PartiQLValueType getType();

    /**
     * @return the field name of the current value; or null if there is no valid current value or if the current value
     * is not a field of a struct.
     */
    public String getFieldName();

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#STRING},
     * {@link PartiQLValueType#SYMBOL},
     * {@link PartiQLValueType#CHAR}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    @NotNull
    String getString() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#BOOL}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    public boolean getBoolean() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#BINARY},
     * {@link PartiQLValueType#BLOB},
     * {@link PartiQLValueType#CLOB}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     * @apiNote <b>! ! ! EXPERIMENTAL ! ! !</b> This is an experimental API under development by the PartiQL maintainers.
     * Please abstain from using this API until given notice otherwise. This may break between iterations without prior notice.
     * @deprecated BINARY doesn't exist in SQL or Ion. This is subject to deletion. BLOB and CLOB are typically represented
     * in a fashion that can support much larger values -- this may be modified at any time.
     */
    @Deprecated
    @NotNull
    public byte[] getBytes() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#BYTE},
     * {@link PartiQLValueType#INT8}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     * @apiNote <b>! ! ! EXPERIMENTAL ! ! !</b> This is an experimental API under development by the PartiQL maintainers.
     * Please abstain from using this API until given notice otherwise. This may break between iterations without prior notice.
     * @deprecated BYTE is not present in SQL or Ion. This is subject to deletion.
     */
    @Deprecated
    public byte getByte() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#DATE}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    @NotNull
    public Date getDate() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#TIME}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    @NotNull
    public Time getTime() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#TIMESTAMP}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    @NotNull
    public Timestamp getTimestamp() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#INT16}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    public short getShort() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#INT32}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    public int getInt() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#INT64},
     * {@link PartiQLValueType#INTERVAL}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     * @apiNote <b>! ! ! EXPERIMENTAL ! ! !</b> This is an experimental API under development by the PartiQL maintainers.
     * Please abstain from using this API until given notice otherwise. This may break between iterations without prior notice.
     */
    // TODO: Internal note: This is WRONG for INTERVAL. Though, it already exists as such, therefore, this propagates
    //  this weird behavior. Eventually, we'll need to add real support for INTERVAL.
    public long getLong() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#INT}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     * @apiNote <b>! ! ! EXPERIMENTAL ! ! !</b> This is an experimental API under development by the PartiQL maintainers.
     * Please abstain from using this API until given notice otherwise. This may break between iterations without prior notice.
     */
    @NotNull
    public BigInteger getBigInteger() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#FLOAT32}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    public float getFloat() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#FLOAT64}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    public double getDouble() throws UnsupportedOperationException, NullPointerException;

    /**
     * This is applicable to the following types:
     * {@link PartiQLValueType#DECIMAL},
     * {@link PartiQLValueType#DECIMAL_ARBITRARY}
     * @return a value representing the applicable PartiQL value
     * @throws UnsupportedOperationException when this method is not applicable to the type returned by {@link PartiQLCursor#getType()}
     * @throws NullPointerException if this method is invoked when {@link PartiQLCursor#isNull()} returns true
     */
    @NotNull
    public BigDecimal getBigDecimal() throws UnsupportedOperationException, NullPointerException;

    /**
     * Converts a {@link PartiQLValue} into {@link PartiQLCursor}.
     */
    static PartiQLCursor of(PartiQLValue value) {
        return new PartiQLCursorDefault(value);
    }
}
