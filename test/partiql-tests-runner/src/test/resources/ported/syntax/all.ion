
{
  name:"trim(from)",
  statement:"trim(from)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb OFFSET SELECT",
  statement:"SELECT a FROM tb OFFSET SELECT",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 MODIFIED OLD foo",
  statement:"INSERT INTO foo VALUE 1 MODIFIED OLD foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add()",
  statement:"date_add()",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(something ' ' from ' string ')",
  statement:"trim(something ' ' from ' string ')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT *, * FROM <<1>>",
  statement:"SELECT *, * FROM <<1>>",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT FROM table1",
  statement:"SELECT FROM table1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim ' ')",
  statement:"trim ' ')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is 'missing'",
  statement:"a is 'missing'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb LIMIT 10 OFFSET 5 ORDER BY b ASC NULLS FIRST",
  statement:"SELECT a FROM tb LIMIT 10 OFFSET 5 ORDER BY b ASC NULLS FIRST",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021-02-29'",
  statement:"DATE '2021-02-29'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC foo EXEC",
  statement:"EXEC foo EXEC",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021-03--10'",
  statement:"DATE '2021-03--10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"(1;)",
  statement:"(1;)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x SET y, z",
  statement:"FROM x SET y, z",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM REMOVE foo",
  statement:"SELECT * FROM REMOVE foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(trailing from)",
  statement:"trim(trailing from)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM data GROUP BY 'a'",
  statement:"SELECT a FROM data GROUP BY 'a'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS VARCHAR(2147483648))",
  statement:"CAST(5 AS VARCHAR(2147483648))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC foo arg0, arg1,",
  statement:"EXEC foo arg0, arg1,",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos ON_CONFLICT WHERE bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 AT pos ON_CONFLICT WHERE bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring('str' 1) from foo",
  statement:"select substring('str' 1) from foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '10-03-2021'",
  statement:"DATE '10-03-2021'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"PIVOT v FROM data",
  statement:"PIVOT v FROM data",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"NULL is `null`",
  statement:"NULL is `null`",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select () from data",
  statement:"select () from data",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb OFFSET",
  statement:"SELECT a FROM tb OFFSET",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM data GROUP BY -1",
  statement:"SELECT a FROM data GROUP BY -1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE Customer (name string CONSTRAINT NOT NULL)",
  statement:"CREATE TABLE Customer (name string CONSTRAINT NOT NULL)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(both ' ' from 'test' 2)",
  statement:"trim(both ' ' from 'test' 2)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX goo ON foo (bar)",
  statement:"DROP INDEX goo ON foo (bar)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CASE name ELSE 1 END",
  statement:"CASE name ELSE 1 END",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo LEFT JOIN bar",
  statement:"SELECT * FROM foo LEFT JOIN bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY foo asc desc",
  statement:"SELECT a FROM tb ORDER BY foo asc desc",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021--03-10'",
  statement:"DATE '2021--03-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE Customer (name NOT NULL)",
  statement:"CREATE TABLE Customer (name NOT NULL)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD",
  statement:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE a LIKE",
  statement:"SELECT a, b FROM data WHERE a LIKE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY a ASC FIRST",
  statement:"SELECT a FROM tb ORDER BY a ASC FIRST",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, UPDATE FROM {'a' : 1}",
  statement:"SELECT a, UPDATE FROM {'a' : 1}",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim (' '",
  statement:"trim (' '",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"COUNT(a, *)",
  statement:"COUNT(a, *)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS DECIMAL(2147483648))",
  statement:"CAST(5 AS DECIMAL(2147483648))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS DECIMAL(1, 2147483648))",
  statement:"CAST(5 AS DECIMAL(1, 2147483648))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE CREATE TABLE foo",
  statement:"CREATE TABLE CREATE TABLE foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"",
  statement:"",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb NULLS LAST ORDER BY a ASC",
  statement:"SELECT a FROM tb NULLS LAST ORDER BY a ASC",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"F(*)",
  statement:"F(*)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(trailing '' from)",
  statement:"trim(trailing '' from)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(year,)",
  statement:"date_add(year,)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE Customer (name string name_is_present NOT NULL)",
  statement:"CREATE TABLE Customer (name string name_is_present NOT NULL)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX ON",
  statement:"DROP INDEX ON",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM data GROUP BY 1",
  statement:"SELECT a FROM data GROUP BY 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE bar",
  statement:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC",
  statement:"EXEC",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DELETE x",
  statement:"DELETE x",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '+99999-03-10'",
  statement:"DATE '+99999-03-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE INSERT INTO foo VALUE 1 AT bar",
  statement:"INSERT INTO foo VALUE INSERT INTO foo VALUE 1 AT bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x DELETE FROM y",
  statement:"FROM x DELETE FROM y",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CASE END",
  statement:"CASE END",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY asc; bar",
  statement:"SELECT a FROM tb ORDER BY asc; bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring('str' from 1 from foo ",
  statement:"select substring('str' from 1 from foo ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(' ' '   1   ')",
  statement:"trim(' ' '   1   ')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE VIEW FOO",
  statement:"CREATE VIEW FOO",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY asc, bar",
  statement:"SELECT a FROM tb ORDER BY asc, bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb OFFSET 5 LIMIT 10",
  statement:"SELECT a FROM tb OFFSET 5 LIMIT 10",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT ord, val FROM table1 AT ord AS val",
  statement:"SELECT ord, val FROM table1 AT ord AS val",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo (1+1)",
  statement:"CREATE INDEX ON foo (1+1)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE x",
  statement:"UPDATE x",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring('str', 1, 1 from foo ",
  statement:"select substring('str', 1, 1 from foo ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '1999-11-31'",
  statement:"DATE '1999-11-31'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '1999-10-32'",
  statement:"DATE '1999-10-32'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY",
  statement:"SELECT a FROM tb ORDER BY",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY a NULLS FIRST SELECT",
  statement:"SELECT a FROM tb ORDER BY a NULLS FIRST SELECT",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE a LIKE ESCAPE '\\' b",
  statement:"SELECT a, b FROM data WHERE a LIKE ESCAPE '\\' b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE 2012",
  statement:"DATE 2012",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUES (1, 2) AT bar",
  statement:"INSERT INTO foo VALUES (1, 2) AT bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY a ASC LAST",
  statement:"SELECT a FROM tb ORDER BY a ASC LAST",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x SET y.* = 5",
  statement:"FROM x SET y.* = 5",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST 5 as integer",
  statement:"CAST 5 as integer",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE x, y SET a = b",
  statement:"UPDATE x, y SET a = b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not 'missing'",
  statement:"a is not 'missing'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT REMOVE foo FROM bar",
  statement:"SELECT REMOVE foo FROM bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x UPDATE y SET a = b",
  statement:"FROM x UPDATE y SET a = b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo INNER CROSS JOIN bar ON true",
  statement:"SELECT * FROM foo INNER CROSS JOIN bar ON true",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY SELECT",
  statement:"SELECT a FROM tb ORDER BY SELECT",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(foobar",
  statement:"date_add(foobar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '+9999-03-10'",
  statement:"DATE '+9999-03-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE ESCAPE '\\' a LIKE b ",
  statement:"SELECT a, b FROM data WHERE ESCAPE '\\' a LIKE b ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"extract(year from)",
  statement:"extract(year from)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '1999-1-31'",
  statement:"DATE '1999-1-31'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = EXEC foo arg1, arg2",
  statement:"UPDATE test SET x = EXEC foo arg1, arg2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE LIKE a b",
  statement:"SELECT a, b FROM data WHERE LIKE a b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE foo-bar",
  statement:"CREATE TABLE foo-bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '-9999-03-10'",
  statement:"DATE '-9999-03-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(trailing '')",
  statement:"trim(trailing '')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX bar foo",
  statement:"DROP INDEX bar foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(both '' 'test')",
  statement:"trim(both '' 'test')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX (1+1) on foo",
  statement:"DROP INDEX (1+1) on foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC foo, arg0, arg1",
  statement:"EXEC foo, arg0, arg1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING UPDATED OLD foo",
  statement:"INSERT INTO foo VALUE 1 RETURNING UPDATED OLD foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"x...a",
  statement:"x...a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE Customer ()",
  statement:"CREATE TABLE Customer ()",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = DROP INDEX bar ON foo",
  statement:"UPDATE test SET x = DROP INDEX bar ON foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not (missing)",
  statement:"a is not (missing)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '03-10-2021'",
  statement:"DATE '03-10-2021'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = DROP TABLE foo",
  statement:"UPDATE test SET x = DROP TABLE foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHEN bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHEN bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS INTEGER(10))",
  statement:"CAST(5 AS INTEGER(10))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING *",
  statement:"INSERT INTO foo VALUE 1 RETURNING *",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE 'date_string'",
  statement:"DATE 'date_string'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS VARCHAR(a))",
  statement:"CAST(5 AS VARCHAR(a))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON (bar)",
  statement:"CREATE INDEX ON (bar)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD , ALL OLD *",
  statement:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD , ALL OLD *",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb LIMIT 10 OFFSET 5 ORDER BY b ASC",
  statement:"SELECT a FROM tb LIMIT 10 OFFSET 5 ORDER BY b ASC",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT *, foo.* FROM <<{ a: 1 }>> as foo",
  statement:"SELECT *, foo.* FROM <<{ a: 1 }>> as foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"1;1",
  statement:"1;1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = DELETE FROM y",
  statement:"UPDATE test SET x = DELETE FROM y",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = CREATE INDEX ON foo (x, y.z)",
  statement:"UPDATE test SET x = CREATE INDEX ON foo (x, y.z)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = CREATE TABLE foo",
  statement:"UPDATE test SET x = CREATE TABLE foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring from 'asdf' for 1) FROM foo",
  statement:"select substring from 'asdf' for 1) FROM foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"extract(b from c)",
  statement:"extract(b from c)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo LEFT CROSS JOIN bar ON true",
  statement:"SELECT * FROM foo LEFT CROSS JOIN bar ON true",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 CONFLICT WHERE bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 CONFLICT WHERE bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"COUNT(ALL *)",
  statement:"COUNT(ALL *)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = INSERT INTO foo VALUE 1",
  statement:"UPDATE test SET x = INSERT INTO foo VALUE 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE `2012-08-28`",
  statement:"DATE `2012-08-28`",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"VALUE 1",
  statement:"VALUE 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select a  data",
  statement:"select a  data",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD ;",
  statement:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD ;",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo RIGHT CROSS JOIN bar ON true",
  statement:"SELECT * FROM foo RIGHT CROSS JOIN bar ON true",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo RIGHT JOIN bar",
  statement:"SELECT * FROM foo RIGHT JOIN bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE a LIKE b ESCAPE",
  statement:"SELECT a, b FROM data WHERE a LIKE b ESCAPE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING",
  statement:"INSERT INTO foo VALUE 1 RETURNING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER foo",
  statement:"SELECT a FROM tb ORDER foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE bar DO SOMETHING",
  statement:"INSERT INTO foo VALUE 1 AT pos ON CONFLICT WHERE bar DO SOMETHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"REMOVE REMOVE y",
  statement:"REMOVE REMOVE y",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP TABLE foo+bar",
  statement:"DROP TABLE foo+bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT foo.id, foo.table FROM `[{id: 1, table: \"foos\"}]` AS foo",
  statement:"SELECT foo.id, foo.table FROM `[{id: 1, table: \"foos\"}]` AS foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"values 1,2)",
  statement:"values 1,2)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select a as true from data",
  statement:"select a as true from data",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = REMOVE y",
  statement:"UPDATE test SET x = REMOVE y",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER",
  statement:"SELECT a FROM tb ORDER",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select a from data group by 1",
  statement:"select a from data group by 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select a from data at true",
  statement:"select a from data at true",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021:03:10'",
  statement:"DATE '2021:03:10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY a ASC NULLS",
  statement:"SELECT a FROM tb ORDER BY a ASC NULLS",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(year, b)",
  statement:"date_add(year, b)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo bar",
  statement:"CREATE INDEX ON foo bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DELETE FROM x, y",
  statement:"DELETE FROM x, y",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS NUMERIC(2147483648))",
  statement:"CAST(5 AS NUMERIC(2147483648))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS NUMERIC(1, 2147483648))",
  statement:"CAST(5 AS NUMERIC(1, 2147483648))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim(both 'test')",
  statement:"trim(both 'test')",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE spam, eggs",
  statement:"INSERT INTO foo VALUE spam, eggs",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SUM(*)",
  statement:"SUM(*)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY a NULLS SELECT",
  statement:"SELECT a FROM tb ORDER BY a NULLS SELECT",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX bar ON foo + 1",
  statement:"DROP INDEX bar ON foo + 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"COUNT(DISTINCT *)",
  statement:"COUNT(DISTINCT *)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"5 BETWEEN 1  10",
  statement:"5 BETWEEN 1  10",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '9999-300000000-10'",
  statement:"DATE '9999-300000000-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE 2012-08-28",
  statement:"DATE 2012-08-28",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS SELECT)",
  statement:"CAST(5 AS SELECT)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD a,b",
  statement:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD a,b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP INDEX",
  statement:"DROP INDEX",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo INNER JOIN bar",
  statement:"SELECT * FROM foo INNER JOIN bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"extract(from b)",
  statement:"extract(from b)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"            CREATE TABLE Customer (\n               age int\n               city string NULL       \n            )",
  statement:"            CREATE TABLE Customer (\n               age int\n               city string NULL       \n            )",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"@ @a",
  statement:"@ @a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHEN bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHEN bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS REAL(10))",
  statement:"CAST(5 AS REAL(10))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(year)",
  statement:"date_add(year)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x SET y[1+1] = 5",
  statement:"FROM x SET y[1+1] = 5",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"extract(year b)",
  statement:"extract(year b)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC EXEC",
  statement:"EXEC EXEC",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo (a.*)",
  statement:"CREATE INDEX ON foo (a.*)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DELETE FROM x.n.m AS y, a",
  statement:"DELETE FROM x.n.m AS y, a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo (bar) + 1",
  statement:"CREATE INDEX ON foo (bar) + 1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE",
  statement:"DATE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(year a, b)",
  statement:"date_add(year a, b)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DELETE FROM x.n, a",
  statement:"DELETE FROM x.n, a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON_CONFLICT WHERE bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON_CONFLICT WHERE bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURING MODIFIED OLD foo",
  statement:"INSERT INTO foo VALUE 1 RETURING MODIFIED OLD foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"NULL is not `null`",
  statement:"NULL is not `null`",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY foo, ,",
  statement:"SELECT a FROM tb ORDER BY foo, ,",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX foo_index ON foo (bar)",
  statement:"CREATE INDEX foo_index ON foo (bar)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT 1, * FROM <<{ a: 1 }>>",
  statement:"SELECT 1, * FROM <<{ a: 1 }>>",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring('str' from 1 for 1 from foo ",
  statement:"select substring('str' from 1 for 1 from foo ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, DATE '2012-12-12', FROM {'a' : 1}",
  statement:"SELECT a, DATE '2012-12-12', FROM {'a' : 1}",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '20210310'",
  statement:"DATE '20210310'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"(1 + 2",
  statement:"(1 + 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is (missing)",
  statement:"a is (missing)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CASE ELSE 1 END",
  statement:"CASE ELSE 1 END",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(a, b, c)",
  statement:"date_add(a, b, c)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT pos CONFLICT WHERE bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 AT pos CONFLICT WHERE bar DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM foo LET bar b",
  statement:"SELECT a FROM foo LET bar b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"5 5",
  statement:"5 5",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE SELECT",
  statement:"CREATE TABLE SELECT",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar DO SOMETHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar DO SOMETHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM <<1>>;SELECT * FROM <<1>>",
  statement:"SELECT * FROM <<1>>;SELECT * FROM <<1>>",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"select substring('str', 1 from foo ",
  statement:"select substring('str', 1 from foo ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX",
  statement:"CREATE INDEX",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXEC foo()",
  statement:"EXEC foo()",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(5 AS VARCHAR(-1))",
  statement:"CAST(5 AS VARCHAR(-1))",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"@(a)",
  statement:"@(a)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DELETE FROM x.n.m AS y AT z, a",
  statement:"DELETE FROM x.n.m AS y AT z, a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM data WHERE a LIKE b ECSAPE '\\'",
  statement:"SELECT a, b FROM data WHERE a LIKE b ECSAPE '\\'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM foo LET bar AS",
  statement:"SELECT a FROM foo LET bar AS",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE test SET x = SET test.y = 6",
  statement:"UPDATE test SET x = SET test.y = 6",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021-03-+10'",
  statement:"DATE '2021-03-+10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE TABLE",
  statement:"CREATE TABLE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DATE '2021-+03-10'",
  statement:"DATE '2021-+03-10'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo (a[1+1])",
  statement:"CREATE INDEX ON foo (a[1+1])",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT foo.*, * FROM <<{ a: 1 }>> as foo",
  statement:"SELECT foo.*, * FROM <<{ a: 1 }>> as foo",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(year, b, c,)",
  statement:"date_add(year, b, c,)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT *, 1 FROM <<{ a: 1 }>>",
  statement:"SELECT *, 1 FROM <<{ a: 1 }>>",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb ORDER BY foo bar",
  statement:"SELECT a FROM tb ORDER BY foo bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"FROM x SET",
  statement:"FROM x SET",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM foo INNER JOIN (bar INNER JOIN baz ON true)",
  statement:"SELECT * FROM foo INNER JOIN (bar INNER JOIN baz ON true)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM data GROUP BY 2",
  statement:"SELECT a FROM data GROUP BY 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"@",
  statement:"@",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a, b FROM stuff s LEFT JOIN @s ON f(s)",
  statement:"SELECT a, b FROM stuff s LEFT JOIN @s ON f(s)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a, b FROM stuff s INNER CROSS JOIN @s WHERE f(s)",
  statement:"SELECT a, b FROM stuff s INNER CROSS JOIN @s WHERE f(s)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a, b FROM stuff s, @s WHERE f(s)",
  statement:"SELECT a, b FROM stuff s, @s WHERE f(s)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a, b FROM stuff s CROSS JOIN @s WHERE f(s)",
  statement:"SELECT a, b FROM stuff s CROSS JOIN @s WHERE f(s)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a, b FROM stuff s LEFT CROSS JOIN @s WHERE f(s)",
  statement:"SELECT a, b FROM stuff s LEFT CROSS JOIN @s WHERE f(s)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar",
  statement:"INSERT INTO foo VALUE 1 AT bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED WHERE excluded.id > 2",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED WHERE excluded.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5 SET m = 6 WHERE a = b",
  statement:"UPDATE x SET k = 5 SET m = 6 WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y SET k = 5, m = 6 WHERE a = b",
  statement:"UPDATE x AS y SET k = 5, m = 6 WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPSERT INTO foo As f <<{'id': 1, 'name':'bob'}>>",
  statement:"UPSERT INTO foo As f <<{'id': 1, 'name':'bob'}>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED WHERE excluded.id > 2",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED WHERE excluded.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED WHERE f.id > 2",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED WHERE f.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b REMOVE y RETURNING MODIFIED NEW a",
  statement:"FROM x WHERE a = b REMOVE y RETURNING MODIFIED NEW a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SET k = 5, m = 6",
  statement:"SET k = 5, m = 6",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo 'bar'",
  statement:"EXEC foo 'bar'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPSERT INTO foo SELECT bar.id, bar.name FROM bar",
  statement:"UPSERT INTO foo SELECT bar.id, bar.name FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo <<1>>",
  statement:"EXEC foo <<1>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING ALL OLD *",
  statement:"INSERT INTO foo VALUE 1 RETURNING ALL OLD *",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x INSERT INTO foo VALUES (1, 2), (3, 4)",
  statement:"FROM x INSERT INTO foo VALUES (1, 2), (3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k = 5 RETURNING ALL OLD x",
  statement:"FROM x WHERE a = b SET k = 5 RETURNING ALL OLD x",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING WHERE foo.id > 2",
  statement:"INSERT into foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING WHERE foo.id > 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"REPLACE INTO foo SELECT bar.id, bar.name FROM bar",
  statement:"REPLACE INTO foo SELECT bar.id, bar.name FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 WHERE a = b",
  statement:"UPDATE x SET k = 5, m = 6 WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo 1",
  statement:"EXEC foo 1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"REMOVE a.b['c'][2]",
  statement:"REMOVE a.b['c'][2]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b WHERE a = b RETURNING MODIFIED OLD a",
  statement:"UPDATE x SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b WHERE a = b RETURNING MODIFIED OLD a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x.n.m AS y",
  statement:"DELETE FROM x.n.m AS y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED WHERE excluded.id > 2",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED WHERE excluded.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED WHERE foo.id > 2",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED WHERE foo.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y INSERT INTO k VALUE 1 AT 'j' WHERE a = b",
  statement:"UPDATE x AS y INSERT INTO k VALUE 1 AT 'j' WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE {'id': 1, 'name':'bob'} ON CONFLICT DO UPDATE EXCLUDED",
  statement:"INSERT INTO foo VALUE {'id': 1, 'name':'bob'} ON CONFLICT DO UPDATE EXCLUDED",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a, MODIFIED OLD b",
  statement:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a, MODIFIED OLD b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x.n.m",
  statement:"DELETE FROM x.n.m",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x INSERT INTO foo VALUE 1 AT bar",
  statement:"FROM x INSERT INTO foo VALUE 1 AT bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b REMOVE y",
  statement:"FROM x WHERE a = b REMOVE y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b REMOVE y REMOVE z",
  statement:"FROM x WHERE a = b REMOVE y REMOVE z",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED WHERE f.id > 2",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED WHERE f.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k.m = 5",
  statement:"FROM x WHERE a = b SET k.m = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD '1234'.*",
  statement:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD '1234'.*",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x AS y AT z",
  statement:"DELETE FROM x AS y AT z",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE bar DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo",
  statement:"EXEC foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO UPDATE EXCLUDED",
  statement:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO UPDATE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar RETURNING ALL OLD a",
  statement:"INSERT INTO foo VALUE 1 AT bar RETURNING ALL OLD a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM y",
  statement:"DELETE FROM y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo 'bar0', `1d0`, 2, [3]",
  statement:"EXEC foo 'bar0', `1d0`, 2, [3]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO REPLACE EXCLUDED",
  statement:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO REPLACE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED WHERE foo.id > 2",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED WHERE foo.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING",
  statement:"INSERT into foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO REPLACE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1",
  statement:"INSERT INTO foo VALUE 1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar RETURNING MODIFIED OLD bar, MODIFIED NEW bar, ALL NEW *",
  statement:"INSERT INTO foo VALUE 1 AT bar RETURNING MODIFIED OLD bar, MODIFIED NEW bar, ALL NEW *",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SET k = 5",
  statement:"SET k = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED WHERE excluded.id > 2",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO REPLACE EXCLUDED WHERE excluded.id > 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo SELECT y FROM bar",
  statement:"INSERT INTO foo SELECT y FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM y RETURNING MODIFIED NEW a",
  statement:"DELETE FROM y RETURNING MODIFIED NEW a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE zoo AT z_ord BY z_id SET z.kingdom = 'Fungi'",
  statement:"UPDATE zoo AT z_ord BY z_id SET z.kingdom = 'Fungi'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x INSERT INTO foo VALUE 1",
  statement:"FROM x INSERT INTO foo VALUE 1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a.b",
  statement:"UPDATE x SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a.b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x.n.m AS y AT z",
  statement:"DELETE FROM x.n.m AS y AT z",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED",
  statement:"INSERT into foo VALUES (1, 2), (3, 4) ON CONFLICT DO UPDATE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k = 5, m = 6",
  statement:"FROM x WHERE a = b SET k = 5, m = 6",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO NOTHING",
  statement:"INSERT into foo SELECT bar.id, bar.name FROM bar ON CONFLICT DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk=1 DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk=1 DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk=1 and rk=1 DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk=1 and rk=1 DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk BETWEEN 'a' and 'b' or rk = 'c' DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE hk BETWEEN 'a' and 'b' or rk = 'c' DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE not hk = 'a' DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE not hk = 'a' DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE attribute_exists(hk) DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE attribute_exists(hk) DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE not attribute_exists(hk) DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 ON CONFLICT WHERE not attribute_exists(hk) DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x.n",
  statement:"DELETE FROM x.n",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x INSERT INTO foo SELECT y FROM bar",
  statement:"FROM x INSERT INTO foo SELECT y FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a",
  statement:"UPDATE x AS y SET k = 5, m = 6 WHERE a = b RETURNING MODIFIED OLD a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD foo",
  statement:"INSERT INTO foo VALUE 1 RETURNING MODIFIED OLD foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SET \"k\" = 5",
  statement:"SET \"k\" = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5 SET m = 6 WHERE a = b RETURNING ALL OLD x.*",
  statement:"UPDATE x SET k = 5 SET m = 6 WHERE a = b RETURNING ALL OLD x.*",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y INSERT INTO k << 1 >> WHERE a = b",
  statement:"UPDATE x AS y INSERT INTO k << 1 >> WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo SELECT baz FROM bar",
  statement:"EXEC foo SELECT baz FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"REPLACE INTO foo As f <<{'id': 1, 'name':'bob'}>>",
  statement:"REPLACE INTO foo As f <<{'id': 1, 'name':'bob'}>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x AS y",
  statement:"DELETE FROM x AS y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y REMOVE y.a WHERE a = b",
  statement:"UPDATE x AS y REMOVE y.a WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXEC foo MISSING",
  statement:"EXEC foo MISSING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED",
  statement:"INSERT into foo AS f <<{'id': 1, 'name':'bob'}>> ON CONFLICT DO UPDATE EXCLUDED",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k = 5, m = 6 RETURNING ALL OLD x",
  statement:"FROM x WHERE a = b SET k = 5, m = 6 RETURNING ALL OLD x",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar ON CONFLICT WHERE a DO NOTHING",
  statement:"INSERT INTO foo VALUE 1 AT bar ON CONFLICT WHERE a DO NOTHING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b",
  statement:"FROM x WHERE a = b SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"REMOVE y",
  statement:"REMOVE y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b REMOVE y REMOVE z RETURNING MODIFIED OLD a",
  statement:"FROM x WHERE a = b REMOVE y REMOVE z RETURNING MODIFIED OLD a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x AS y INSERT INTO k << 1 >> WHERE a = b RETURNING MODIFIED OLD a",
  statement:"UPDATE x AS y INSERT INTO k << 1 >> WHERE a = b RETURNING MODIFIED OLD a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k['m'] = 5",
  statement:"FROM x WHERE a = b SET k['m'] = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPSERT INTO foo <<{'id': 1, 'name':'bob'}>>",
  statement:"UPSERT INTO foo <<{'id': 1, 'name':'bob'}>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE zoo AT z_ord SET z.kingdom = 'Fungi'",
  statement:"UPDATE zoo AT z_ord SET z.kingdom = 'Fungi'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE zoo BY z_id SET z.kingdom = 'Fungi'",
  statement:"UPDATE zoo BY z_id SET z.kingdom = 'Fungi'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"REPLACE INTO foo <<{'id': 1, 'name':'bob'}>>",
  statement:"REPLACE INTO foo <<{'id': 1, 'name':'bob'}>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"UPDATE x SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b WHERE a = b",
  statement:"UPDATE x SET k = 5, m = 6 INSERT INTO c VALUE << 1 >> REMOVE a SET l = 3 REMOVE b WHERE a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUES (1, 2), (3, 4)",
  statement:"INSERT INTO foo VALUES (1, 2), (3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar ON CONFLICT WHERE a DO NOTHING RETURNING ALL OLD foo",
  statement:"INSERT INTO foo VALUE 1 AT bar ON CONFLICT WHERE a DO NOTHING RETURNING ALL OLD foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT WHERE TRUE DO NOTHING",
  statement:"INSERT INTO foo <<{'id': 1, 'name':'bob'}>> ON CONFLICT WHERE TRUE DO NOTHING",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"UPDATE zoo z SET z.kingdom = 'Fungi'",
  statement:"UPDATE zoo z SET z.kingdom = 'Fungi'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"INSERT INTO foo VALUE 1 AT bar RETURNING ALL OLD foo",
  statement:"INSERT INTO foo VALUE 1 AT bar RETURNING ALL OLD foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DELETE FROM x AT y",
  statement:"DELETE FROM x AT y",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k = 5",
  statement:"FROM x WHERE a = b SET k = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"FROM x WHERE a = b SET k[3] = 5",
  statement:"FROM x WHERE a = b SET k[3] = 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM stuff s RIGHT CROSS JOIN foo f",
  statement:"SELECT x FROM stuff s RIGHT CROSS JOIN foo f",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM (A INNER JOIN B ON A = B)",
  statement:"SELECT x FROM (A INNER JOIN B ON A = B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM (((A INNER JOIN B ON A = B)))",
  statement:"SELECT x FROM (((A INNER JOIN B ON A = B)))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM A INNER JOIN (1) ON true",
  statement:"SELECT x FROM A INNER JOIN (1) ON true",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM (A INNER JOIN B ON A = B) INNER JOIN C ON B = C",
  statement:"SELECT x FROM (A INNER JOIN B ON A = B) INNER JOIN C ON B = C",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM A INNER JOIN (SELECT x FROM 1) ON true",
  statement:"SELECT x FROM A INNER JOIN (SELECT x FROM 1) ON true",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM A INNER JOIN (B INNER JOIN (C INNER JOIN D ON C = D) ON B = C) ON A = B",
  statement:"SELECT x FROM A INNER JOIN (B INNER JOIN (C INNER JOIN D ON C = D) ON B = C) ON A = B",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a, b CROSS JOIN c LEFT JOIN d ON e RIGHT OUTER CROSS JOIN f OUTER JOIN g ON h",
  statement:"SELECT x FROM a, b CROSS JOIN c LEFT JOIN d ON e RIGHT OUTER CROSS JOIN f OUTER JOIN g ON h",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM stuff s FULL OUTER JOIN foo f ON s = f",
  statement:"SELECT x FROM stuff s FULL OUTER JOIN foo f ON s = f",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM A INNER JOIN (B INNER JOIN C ON B = C) ON A = B",
  statement:"SELECT x FROM A INNER JOIN (B INNER JOIN C ON B = C) ON A = B",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a INNER CROSS JOIN b CROSS JOIN c LEFT JOIN d ON e RIGHT OUTER CROSS JOIN f OUTER JOIN g ON h",
  statement:"SELECT x FROM a INNER CROSS JOIN b CROSS JOIN c LEFT JOIN d ON e RIGHT OUTER CROSS JOIN f OUTER JOIN g ON h",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(g MATCH <-[:City]->)",
  statement:"(g MATCH <-[:City]->)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b,c, t1.x as x, t2.y as y FROM graph MATCH ((a) -> (b), (a) -> (c)), table1 as t1, table2 as t2",
  statement:"SELECT a,b,c, t1.x as x, t2.y as y FROM graph MATCH ((a) -> (b), (a) -> (c)), table1 as t1, table2 as t2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"3 + MyGraph MATCH (x)",
  statement:"3 + MyGraph MATCH (x)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM my_graph MATCH ()",
  statement:"SELECT * FROM my_graph MATCH ()",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x:Label&OtherLabel)",
  statement:"SELECT x FROM g MATCH (x:Label&OtherLabel)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <-[e:E]- (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <-[e:E]- (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x: L1|L2&L3|!L4|(L5&%))",
  statement:"SELECT x FROM g MATCH (x: L1|L2&L3|!L4|(L5&%))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH ANY 5 p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH ANY 5 p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) - (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) - (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <~ (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <~ (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT u as banCandidate FROM g MATCH (p:Post Where p.isFlagged = true) <-[:createdPost]- (u:Usr WHERE u.isBanned = false AND u.karma < 20) -[:createdComment]->(c:Comment WHERE c.isFlagged = true) WHERE p.title LIKE '%considered harmful%'",
  statement:"SELECT u as banCandidate FROM g MATCH (p:Post Where p.isFlagged = true) <-[:createdPost]- (u:Usr WHERE u.isBanned = false AND u.karma < 20) -[:createdComment]->(c:Comment WHERE c.isFlagged = true) WHERE p.title LIKE '%considered harmful%'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH ANY SHORTEST p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH ANY SHORTEST p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x:!Label)",
  statement:"SELECT x FROM g MATCH (x:!Label)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b,c, t1.x as x, t2.y as y FROM graph MATCH (a) -> (b), (a) -> (c), table1 as t1, table2 as t2",
  statement:"SELECT a,b,c, t1.x as x, t2.y as y FROM graph MATCH (a) -> (b), (a) -> (c), table1 as t1, table2 as t2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"3 + (MyGraph MATCH (x))",
  statement:"3 + (MyGraph MATCH (x))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <- (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <- (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH SHORTEST 5 GROUP p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH SHORTEST 5 GROUP p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH SIMPLE p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH SIMPLE p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) -[e:E]-> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) -[e:E]-> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM (g MATCH (a) -[:has]-> (x), (x)-[:contains]->(b))",
  statement:"SELECT a,b FROM (g MATCH (a) -[:has]-> (x), (x)-[:contains]->(b))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH pathVar = (a:A)[-[e:Edge]->]*(b:B)",
  statement:"SELECT a,b FROM g MATCH pathVar = (a:A)[-[e:Edge]->]*(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x AS target FROM my_graph MATCH (x:Label) WHERE x.has_data = true",
  statement:"SELECT x AS target FROM my_graph MATCH (x:Label) WHERE x.has_data = true",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a)-[:has]->()-[:contains]->(b)",
  statement:"SELECT a,b FROM g MATCH (a)-[:has]->()-[:contains]->(b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)~[:edge]~{5,}(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)~[:edge]~{5,}(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)<-[:edge]-+(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)<-[:edge]-+(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)-[:edge]->*(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)-[:edge]->*(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH ACYCLIC p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH ACYCLIC p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(MyGraph MATCH (x)) UNION SELECT * FROM tbl1",
  statement:"(MyGraph MATCH (x)) UNION SELECT * FROM tbl1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH pathVar = (a:A)[()-[e:Edge]->()]{1,3}(b:B)",
  statement:"SELECT a,b FROM g MATCH pathVar = (a:A)[()-[e:Edge]->()]{1,3}(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM tbl1 UNION (MyGraph MATCH (x))",
  statement:"SELECT * FROM tbl1 UNION (MyGraph MATCH (x))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH pathVar = (a:A)(-[e:Edge]->)*(b:B)",
  statement:"SELECT a,b FROM g MATCH pathVar = (a:A)(-[e:Edge]->)*(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) ~[e:E]~> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) ~[e:E]~> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH ANY p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH ANY p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"MyGraph MATCH (x), -[u]-> ",
  statement:"MyGraph MATCH (x), -[u]-> ",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)~{5,}(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)~{5,}(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x:A)",
  statement:"SELECT x FROM g MATCH (x:A)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)-{2,6}(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)-{2,6}(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"MyGraph MATCH (x) UNION SELECT * FROM tbl1",
  statement:"MyGraph MATCH (x) UNION SELECT * FROM tbl1",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT x FROM my_graph MATCH (x)",
  statement:"SELECT x FROM my_graph MATCH (x)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <-> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <-> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"MyGraph MATCH (x)",
  statement:"MyGraph MATCH (x)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH [(a:A)-[e:Edge]->(b:A) WHERE a.owner=b.owner]{2,5}",
  statement:"SELECT a,b FROM g MATCH [(a:A)-[e:Edge]->(b:A) WHERE a.owner=b.owner]{2,5}",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)-[e:edge]-{2,6}(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)-[e:edge]-{2,6}(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)<-+(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)<-+(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A)->*(b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A)->*(b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(g MATCH <-[ : Country | City & Sovereign ]->)",
  statement:"(g MATCH <-[ : Country | City & Sovereign ]->)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x:%)",
  statement:"SELECT x FROM g MATCH (x:%)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) -> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) -> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT 1 FROM (g MATCH (), -[]-> )",
  statement:"SELECT 1 FROM (g MATCH (), -[]-> )",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) -[e:E]- (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) -[e:E]- (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <~[e:E]~ (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <~[e:E]~ (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH All SHORTEST p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH All SHORTEST p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM tbl1 UNION MyGraph MATCH (x)",
  statement:"SELECT * FROM tbl1 UNION MyGraph MATCH (x)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT 1 FROM (g MATCH -[]->, ())",
  statement:"SELECT 1 FROM (g MATCH -[]->, ())",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) ~> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) ~> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM my_graph MATCH (x)",
  statement:"SELECT * FROM my_graph MATCH (x)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT the_a.name AS src, the_b.name AS dest FROM my_graph MATCH (the_a:a) -[the_y:y]-> (the_b:b) WHERE the_y.score > 10",
  statement:"SELECT the_a.name AS src, the_b.name AS dest FROM my_graph MATCH (the_a:a) -[the_y:y]-> (the_b:b) WHERE the_y.score > 10",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(g MATCH <-[:!%]->)",
  statement:"(g MATCH <-[:!%]->)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x: ((L1 | (L2&L3)) | !L4) | (L5&%))",
  statement:"SELECT x FROM g MATCH (x: ((L1 | (L2&L3)) | !L4) | (L5&%))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH SHORTEST 5 p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH SHORTEST 5 p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM g MATCH (x:Label|OtherLabel)",
  statement:"SELECT x FROM g MATCH (x:Label|OtherLabel)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT 1 FROM my_graph MATCH ()",
  statement:"SELECT 1 FROM my_graph MATCH ()",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b,c, t1.x as x, t2.y as y FROM (graph MATCH (a) -> (b), (a) -> (c)), table1 as t1, table2 as t2",
  statement:"SELECT a,b,c, t1.x as x, t2.y as y FROM (graph MATCH (a) -> (b), (a) -> (c)), table1 as t1, table2 as t2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT p FROM g MATCH TRAIL p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  statement:"SELECT p FROM g MATCH TRAIL p = (a WHERE a.owner='Dave') -[t:Transfer]-> * (b WHERE b.owner='Aretha')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) ~ (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) ~ (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM (my_graph MATCH (x)) AS a",
  statement:"SELECT * FROM (my_graph MATCH (x)) AS a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) ~[e:E]~ (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) ~[e:E]~ (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT 1 FROM g MATCH -[]-> ",
  statement:"SELECT 1 FROM g MATCH -[]-> ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x.info AS info FROM my_graph MATCH (x) WHERE x.name LIKE 'foo'",
  statement:"SELECT x.info AS info FROM my_graph MATCH (x) WHERE x.name LIKE 'foo'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM my_graph MATCH (x) AS a",
  statement:"SELECT * FROM my_graph MATCH (x) AS a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH p = (a:A) -[e:E]-> (b:B)",
  statement:"SELECT a,b FROM g MATCH p = (a:A) -[e:E]-> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a,b,c, t1.x as x, t2.y as y FROM (graph MATCH ((a) -> (b), (a) -> (c))), table1 as t1, table2 as t2",
  statement:"SELECT a,b,c, t1.x as x, t2.y as y FROM (graph MATCH ((a) -> (b), (a) -> (c))), table1 as t1, table2 as t2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a,b FROM g MATCH (a:A) <-[e:E]-> (b:B)",
  statement:"SELECT a,b FROM g MATCH (a:A) <-[e:E]-> (b:B)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(MyGraph MATCH (x))",
  statement:"(MyGraph MATCH (x))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"( MyGraph MATCH (x), -[u]-> )",
  statement:"( MyGraph MATCH (x), -[u]-> )",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT 1 FROM my_graph MATCH () WHERE contains_value('1')",
  statement:"SELECT 1 FROM my_graph MATCH () WHERE contains_value('1')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b intersect c",
  statement:"a not like b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b intersect all c",
  statement:"a not like b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b except c",
  statement:"a not like b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b except all c",
  statement:"a not like b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b union c",
  statement:"a not like b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b union all c",
  statement:"a not like b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b or c",
  statement:"a not like b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b and c",
  statement:"a not like b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b = c",
  statement:"a not like b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b <> c",
  statement:"a not like b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b in c",
  statement:"a not like b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b not in c",
  statement:"a not like b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b < c",
  statement:"a not like b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b <= c",
  statement:"a not like b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b > c",
  statement:"a not like b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b >= c",
  statement:"a not like b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b between w and c",
  statement:"a not like b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b not between y and c",
  statement:"a not like b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b like c",
  statement:"a not like b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b + c",
  statement:"a not like b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b - c",
  statement:"a not like b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b || c",
  statement:"a not like b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b * c",
  statement:"a not like b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b / c",
  statement:"a not like b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b % c",
  statement:"a not like b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b is boolean",
  statement:"a not like b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not like b is not boolean",
  statement:"a not like b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b AND c / d * e - f || g OR h",
  statement:"a + b AND c / d * e - f || g OR h",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean intersect c",
  statement:"a is boolean intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean intersect all c",
  statement:"a is boolean intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean except c",
  statement:"a is boolean except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean except all c",
  statement:"a is boolean except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean union c",
  statement:"a is boolean union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean union all c",
  statement:"a is boolean union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean or c",
  statement:"a is boolean or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean and c",
  statement:"a is boolean and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean = c",
  statement:"a is boolean = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean in c",
  statement:"a is boolean in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean not in c",
  statement:"a is boolean not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean < c",
  statement:"a is boolean < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean <= c",
  statement:"a is boolean <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean > c",
  statement:"a is boolean > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean >= c",
  statement:"a is boolean >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean between w and c",
  statement:"a is boolean between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean not between y and c",
  statement:"a is boolean not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean like c",
  statement:"a is boolean like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean not like c",
  statement:"a is boolean not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean is not boolean",
  statement:"a is boolean is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b intersect c",
  statement:"a % b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b intersect all c",
  statement:"a % b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b except c",
  statement:"a % b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b except all c",
  statement:"a % b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b union c",
  statement:"a % b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b union all c",
  statement:"a % b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b or c",
  statement:"a % b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b and c",
  statement:"a % b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b = c",
  statement:"a % b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b <> c",
  statement:"a % b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b in c",
  statement:"a % b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b not in c",
  statement:"a % b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b < c",
  statement:"a % b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b <= c",
  statement:"a % b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b > c",
  statement:"a % b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b >= c",
  statement:"a % b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b between w and c",
  statement:"a % b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b not between y and c",
  statement:"a % b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b like c",
  statement:"a % b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b not like c",
  statement:"a % b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b + c",
  statement:"a % b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b - c",
  statement:"a % b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b || c",
  statement:"a % b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b * c",
  statement:"a % b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b / c",
  statement:"a % b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b is boolean",
  statement:"a % b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a % b is not boolean",
  statement:"a % b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b intersect c",
  statement:"a like b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b intersect all c",
  statement:"a like b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b except c",
  statement:"a like b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b except all c",
  statement:"a like b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b union c",
  statement:"a like b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b union all c",
  statement:"a like b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b or c",
  statement:"a like b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b and c",
  statement:"a like b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b = c",
  statement:"a like b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b <> c",
  statement:"a like b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b in c",
  statement:"a like b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b not in c",
  statement:"a like b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b < c",
  statement:"a like b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b <= c",
  statement:"a like b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b > c",
  statement:"a like b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b >= c",
  statement:"a like b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b between w and c",
  statement:"a like b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b not between y and c",
  statement:"a like b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b not like c",
  statement:"a like b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b + c",
  statement:"a like b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b - c",
  statement:"a like b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b || c",
  statement:"a like b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b * c",
  statement:"a like b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b / c",
  statement:"a like b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b % c",
  statement:"a like b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b is boolean",
  statement:"a like b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a like b is not boolean",
  statement:"a like b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b intersect c",
  statement:"a in b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b intersect all c",
  statement:"a in b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b except c",
  statement:"a in b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b except all c",
  statement:"a in b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b union c",
  statement:"a in b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b union all c",
  statement:"a in b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b or c",
  statement:"a in b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b and c",
  statement:"a in b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b = c",
  statement:"a in b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b <> c",
  statement:"a in b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b not in c",
  statement:"a in b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b + c",
  statement:"a in b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b - c",
  statement:"a in b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b || c",
  statement:"a in b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b * c",
  statement:"a in b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b / c",
  statement:"a in b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b % c",
  statement:"a in b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b is boolean",
  statement:"a in b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b is not boolean",
  statement:"a in b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b intersect c",
  statement:"a intersect all b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b except c",
  statement:"a intersect all b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b except all c",
  statement:"a intersect all b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b union c",
  statement:"a intersect all b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b union all c",
  statement:"a intersect all b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b and c",
  statement:"a intersect all b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b or c",
  statement:"a intersect all b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b = c",
  statement:"a intersect all b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b <> c",
  statement:"a intersect all b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b in c",
  statement:"a intersect all b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b not in c",
  statement:"a intersect all b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b < c",
  statement:"a intersect all b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b <= c",
  statement:"a intersect all b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b > c",
  statement:"a intersect all b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b >= c",
  statement:"a intersect all b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b between w and c",
  statement:"a intersect all b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b not between y and c",
  statement:"a intersect all b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b like c",
  statement:"a intersect all b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b not like c",
  statement:"a intersect all b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b + c",
  statement:"a intersect all b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b - c",
  statement:"a intersect all b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b || c",
  statement:"a intersect all b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b * c",
  statement:"a intersect all b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b / c",
  statement:"a intersect all b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b % c",
  statement:"a intersect all b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b is boolean",
  statement:"a intersect all b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect all b is not boolean",
  statement:"a intersect all b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b intersect c",
  statement:"a >= b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b intersect all c",
  statement:"a >= b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b except c",
  statement:"a >= b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b except all c",
  statement:"a >= b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b union c",
  statement:"a >= b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b union all c",
  statement:"a >= b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b or c",
  statement:"a >= b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b and c",
  statement:"a >= b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b = c",
  statement:"a >= b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b <> c",
  statement:"a >= b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b in c",
  statement:"a >= b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b not in c",
  statement:"a >= b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b < c",
  statement:"a >= b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b <= c",
  statement:"a >= b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b > c",
  statement:"a >= b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b between w and c",
  statement:"a >= b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b not between y and c",
  statement:"a >= b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b like c",
  statement:"a >= b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b not like c",
  statement:"a >= b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b + c",
  statement:"a >= b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b - c",
  statement:"a >= b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b || c",
  statement:"a >= b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b * c",
  statement:"a >= b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b / c",
  statement:"a >= b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b % c",
  statement:"a >= b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b is boolean",
  statement:"a >= b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a >= b is not boolean",
  statement:"a >= b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b intersect c",
  statement:"a union b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b intersect all c",
  statement:"a union b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b except c",
  statement:"a union b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b except all c",
  statement:"a union b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b union all c",
  statement:"a union b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b and c",
  statement:"a union b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b or c",
  statement:"a union b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b = c",
  statement:"a union b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b <> c",
  statement:"a union b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b in c",
  statement:"a union b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b not in c",
  statement:"a union b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b < c",
  statement:"a union b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b <= c",
  statement:"a union b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b > c",
  statement:"a union b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b >= c",
  statement:"a union b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b between w and c",
  statement:"a union b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b not between y and c",
  statement:"a union b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b like c",
  statement:"a union b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b not like c",
  statement:"a union b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b + c",
  statement:"a union b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b - c",
  statement:"a union b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b || c",
  statement:"a union b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b * c",
  statement:"a union b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b / c",
  statement:"a union b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b % c",
  statement:"a union b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b is boolean",
  statement:"a union b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union b is not boolean",
  statement:"a union b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b intersect c",
  statement:"a <> b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b intersect all c",
  statement:"a <> b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b except c",
  statement:"a <> b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b except all c",
  statement:"a <> b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b union c",
  statement:"a <> b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b union all c",
  statement:"a <> b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b or c",
  statement:"a <> b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b and c",
  statement:"a <> b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b = c",
  statement:"a <> b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b in c",
  statement:"a <> b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b not in c",
  statement:"a <> b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b + c",
  statement:"a <> b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b - c",
  statement:"a <> b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b || c",
  statement:"a <> b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b * c",
  statement:"a <> b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b / c",
  statement:"a <> b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b % c",
  statement:"a <> b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b is boolean",
  statement:"a <> b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b is not boolean",
  statement:"a <> b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b intersect all c",
  statement:"a intersect b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b except c",
  statement:"a intersect b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b except all c",
  statement:"a intersect b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b union c",
  statement:"a intersect b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b union all c",
  statement:"a intersect b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b and c",
  statement:"a intersect b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b or c",
  statement:"a intersect b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b = c",
  statement:"a intersect b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b <> c",
  statement:"a intersect b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b in c",
  statement:"a intersect b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b not in c",
  statement:"a intersect b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b < c",
  statement:"a intersect b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b <= c",
  statement:"a intersect b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b > c",
  statement:"a intersect b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b >= c",
  statement:"a intersect b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b between w and c",
  statement:"a intersect b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b not between y and c",
  statement:"a intersect b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b like c",
  statement:"a intersect b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b not like c",
  statement:"a intersect b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b + c",
  statement:"a intersect b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b - c",
  statement:"a intersect b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b || c",
  statement:"a intersect b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b * c",
  statement:"a intersect b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b / c",
  statement:"a intersect b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b % c",
  statement:"a intersect b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b is boolean",
  statement:"a intersect b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a intersect b is not boolean",
  statement:"a intersect b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b intersect c",
  statement:"a not between w and b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b intersect all c",
  statement:"a not between w and b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b except c",
  statement:"a not between w and b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b except all c",
  statement:"a not between w and b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b union c",
  statement:"a not between w and b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between w and b union all c",
  statement:"a not between w and b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b or c",
  statement:"a not between y and b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b and c",
  statement:"a not between y and b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b = c",
  statement:"a not between y and b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b <> c",
  statement:"a not between y and b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b in c",
  statement:"a not between y and b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b not in c",
  statement:"a not between y and b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b < c",
  statement:"a not between y and b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b <= c",
  statement:"a not between y and b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b > c",
  statement:"a not between y and b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b >= c",
  statement:"a not between y and b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b between w and c",
  statement:"a not between y and b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b like c",
  statement:"a not between y and b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b not like c",
  statement:"a not between y and b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b + c",
  statement:"a not between y and b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b - c",
  statement:"a not between y and b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b || c",
  statement:"a not between y and b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b * c",
  statement:"a not between y and b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b / c",
  statement:"a not between y and b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b % c",
  statement:"a not between y and b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b is boolean",
  statement:"a not between y and b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not between y and b is not boolean",
  statement:"a not between y and b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b intersect c",
  statement:"a = b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b intersect all c  ",
  statement:"a = b intersect all c  ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b except c",
  statement:"a = b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b except all c  ",
  statement:"a = b except all c  ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b union c",
  statement:"a = b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b union all c  ",
  statement:"a = b union all c  ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b or c",
  statement:"a = b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b and c",
  statement:"a = b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b <> c",
  statement:"a = b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b in c",
  statement:"a = b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b not in c",
  statement:"a = b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b + c",
  statement:"a = b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b - c",
  statement:"a = b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b || c",
  statement:"a = b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b * c",
  statement:"a = b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b / c",
  statement:"a = b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b % c",
  statement:"a = b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b is boolean",
  statement:"a = b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b is not boolean",
  statement:"a = b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b intersect c",
  statement:"a except b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b intersect all c",
  statement:"a except b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b except all c",
  statement:"a except b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b union c",
  statement:"a except b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b union all c",
  statement:"a except b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b and c",
  statement:"a except b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b or c",
  statement:"a except b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b = c",
  statement:"a except b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b <> c",
  statement:"a except b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b in c",
  statement:"a except b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b not in c",
  statement:"a except b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b < c",
  statement:"a except b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b <= c",
  statement:"a except b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b > c",
  statement:"a except b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b >= c",
  statement:"a except b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b between w and c",
  statement:"a except b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b not between y and c",
  statement:"a except b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b like c",
  statement:"a except b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b not like c",
  statement:"a except b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b + c",
  statement:"a except b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b - c",
  statement:"a except b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b || c",
  statement:"a except b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b * c",
  statement:"a except b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b / c",
  statement:"a except b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b % c",
  statement:"a except b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b is boolean",
  statement:"a except b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except b is not boolean",
  statement:"a except b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is boolean + c",
  statement:"a is boolean + c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is boolean - c",
  statement:"a is boolean - c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is boolean || c",
  statement:"a is boolean || c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is boolean * c",
  statement:"a is boolean * c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is boolean / c",
  statement:"a is boolean / c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is boolean % c",
  statement:"a is boolean % c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean + c",
  statement:"a is not boolean + c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean - c",
  statement:"a is not boolean - c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean || c",
  statement:"a is not boolean || c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean * c",
  statement:"a is not boolean * c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean / c",
  statement:"a is not boolean / c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a is not boolean % c",
  statement:"a is not boolean % c",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a || b + c",
  statement:"a || b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b - c",
  statement:"a || b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b < c",
  statement:"a not in b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b <= c",
  statement:"a not in b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b > c",
  statement:"a not in b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b >= c",
  statement:"a not in b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b between w and c",
  statement:"a not in b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b not between y and c",
  statement:"a not in b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b like c",
  statement:"a not in b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b not like c",
  statement:"a not in b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b < c",
  statement:"a in b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b <= c",
  statement:"a in b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b > c",
  statement:"a in b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b >= c",
  statement:"a in b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b between w and c",
  statement:"a in b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b not between y and c",
  statement:"a in b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b like c",
  statement:"a in b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a in b not like c",
  statement:"a in b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b < c",
  statement:"a <> b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b <= c",
  statement:"a <> b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b > c",
  statement:"a <> b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b >= c",
  statement:"a <> b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b between w and c",
  statement:"a <> b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b not between y and c",
  statement:"a <> b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b like c",
  statement:"a <> b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <> b not like c",
  statement:"a <> b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b < c",
  statement:"a = b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b <= c",
  statement:"a = b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b > c",
  statement:"a = b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b >= c",
  statement:"a = b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b between w and c",
  statement:"a = b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b not between y and c",
  statement:"a = b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b like c",
  statement:"a = b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a = b not like c",
  statement:"a = b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b intersect c",
  statement:"a > b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b intersect all c",
  statement:"a > b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b except c",
  statement:"a > b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b except all c",
  statement:"a > b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b union c",
  statement:"a > b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b union all c",
  statement:"a > b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b or c",
  statement:"a > b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b and c",
  statement:"a > b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b = c",
  statement:"a > b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b <> c",
  statement:"a > b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b in c",
  statement:"a > b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b not in c",
  statement:"a > b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b < c",
  statement:"a > b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b <= c",
  statement:"a > b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b >= c",
  statement:"a > b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b between w and c",
  statement:"a > b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b not between y and c",
  statement:"a > b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b like c",
  statement:"a > b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b not like c",
  statement:"a > b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b + c",
  statement:"a > b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b - c",
  statement:"a > b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b || c",
  statement:"a > b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b * c",
  statement:"a > b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b / c",
  statement:"a > b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b % c",
  statement:"a > b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b is boolean",
  statement:"a > b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a > b is not boolean",
  statement:"a > b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b intersect c",
  statement:"a & b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b intersect all c",
  statement:"a & b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b except c",
  statement:"a & b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b except all c",
  statement:"a & b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b union c",
  statement:"a & b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b union all c",
  statement:"a & b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b or c",
  statement:"a & b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b and c",
  statement:"a & b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b = c",
  statement:"a & b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b <> c",
  statement:"a & b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b in c",
  statement:"a & b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b not in c",
  statement:"a & b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b < c",
  statement:"a & b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b <= c",
  statement:"a & b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b > c",
  statement:"a & b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b >= c",
  statement:"a & b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b between w and c",
  statement:"a & b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b not between y and c",
  statement:"a & b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b like c",
  statement:"a & b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b not like c",
  statement:"a & b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b + c",
  statement:"a & b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b - c",
  statement:"a & b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b || c",
  statement:"a & b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b * c",
  statement:"a & b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b / c",
  statement:"a & b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b % c",
  statement:"a & b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b is boolean",
  statement:"a & b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a & b is not boolean",
  statement:"a & b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b intersect c",
  statement:"a + b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b intersect all c",
  statement:"a + b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b except c",
  statement:"a + b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b except all c",
  statement:"a + b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b union c",
  statement:"a + b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b union all c",
  statement:"a + b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b or c",
  statement:"a + b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b and c",
  statement:"a + b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b = c",
  statement:"a + b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b <> c",
  statement:"a + b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b in c",
  statement:"a + b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b not in c",
  statement:"a + b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b < c",
  statement:"a + b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b <= c",
  statement:"a + b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b > c",
  statement:"a + b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b >= c",
  statement:"a + b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b between w and c",
  statement:"a + b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b not between y and c",
  statement:"a + b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b like c",
  statement:"a + b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b not like c",
  statement:"a + b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b - c",
  statement:"a + b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b || c",
  statement:"a + b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b * c",
  statement:"a + b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b / c",
  statement:"a + b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b % c",
  statement:"a + b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b is boolean",
  statement:"a + b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a + b is not boolean",
  statement:"a + b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b intersect c",
  statement:"a or b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b intersect all c ",
  statement:"a or b intersect all c ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b except c",
  statement:"a or b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b except all c ",
  statement:"a or b except all c ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b union c",
  statement:"a or b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b union all c ",
  statement:"a or b union all c ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b and c",
  statement:"a or b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b = c",
  statement:"a or b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b <> c",
  statement:"a or b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b in c",
  statement:"a or b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b not in c",
  statement:"a or b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b < c",
  statement:"a or b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b <= c",
  statement:"a or b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b > c",
  statement:"a or b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b >= c",
  statement:"a or b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b between w and c",
  statement:"a or b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b not between y and c",
  statement:"a or b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b like c",
  statement:"a or b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b not like c",
  statement:"a or b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b + c",
  statement:"a or b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b - c",
  statement:"a or b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b || c",
  statement:"a or b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b * c",
  statement:"a or b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b / c",
  statement:"a or b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b % c",
  statement:"a or b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b is boolean",
  statement:"a or b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a or b is not boolean",
  statement:"a or b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b intersect c",
  statement:"a union all b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b intersect all c",
  statement:"a union all b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b except c",
  statement:"a union all b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b except all c",
  statement:"a union all b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b union c",
  statement:"a union all b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b and c",
  statement:"a union all b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b or c",
  statement:"a union all b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b = c",
  statement:"a union all b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b <> c",
  statement:"a union all b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b in c",
  statement:"a union all b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b not in c",
  statement:"a union all b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b < c",
  statement:"a union all b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b <= c",
  statement:"a union all b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b > c",
  statement:"a union all b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b >= c",
  statement:"a union all b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b between w and c",
  statement:"a union all b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b not between y and c",
  statement:"a union all b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b like c",
  statement:"a union all b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b not like c",
  statement:"a union all b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b + c",
  statement:"a union all b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b - c",
  statement:"a union all b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b || c",
  statement:"a union all b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b * c",
  statement:"a union all b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b / c",
  statement:"a union all b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b % c",
  statement:"a union all b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b is boolean",
  statement:"a union all b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a union all b is not boolean",
  statement:"a union all b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w intersect c",
  statement:"a between b and w intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w intersect all c",
  statement:"a between b and w intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w except c",
  statement:"a between b and w except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w except all c",
  statement:"a between b and w except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w union c",
  statement:"a between b and w union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between b and w union all c",
  statement:"a between b and w union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b or c",
  statement:"a between w and b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b and c",
  statement:"a between w and b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b = c",
  statement:"a between w and b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b <> c",
  statement:"a between w and b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b in c",
  statement:"a between w and b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b not in c",
  statement:"a between w and b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b < c",
  statement:"a between w and b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b <= c",
  statement:"a between w and b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b > c",
  statement:"a between w and b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b >= c",
  statement:"a between w and b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b not between y and c",
  statement:"a between w and b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b like c",
  statement:"a between w and b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b not like c",
  statement:"a between w and b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b + c",
  statement:"a between w and b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b - c",
  statement:"a between w and b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b || c",
  statement:"a between w and b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b * c",
  statement:"a between w and b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b / c",
  statement:"a between w and b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b % c",
  statement:"a between w and b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b is boolean",
  statement:"a between w and b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a between w and b is not boolean",
  statement:"a between w and b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a intersect b",
  statement:"not a intersect b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a intersect all b",
  statement:"not a intersect all b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a except b",
  statement:"not a except b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a except all b",
  statement:"not a except all b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a union b",
  statement:"not a union b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a union all b",
  statement:"not a union all b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a or b",
  statement:"not a or b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a and b",
  statement:"not a and b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a = b",
  statement:"not a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a <> b",
  statement:"not a <> b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a in b",
  statement:"not a in b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a not in b",
  statement:"not a not in b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a < b",
  statement:"not a < b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a <= b",
  statement:"not a <= b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a > b",
  statement:"not a > b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a >= b",
  statement:"not a >= b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a between b and c",
  statement:"not a between b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a not between b and c",
  statement:"not a not between b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a like b",
  statement:"not a like b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a not like b",
  statement:"not a not like b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a + b",
  statement:"not a + b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a - b",
  statement:"not a - b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a || b",
  statement:"not a || b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a * b",
  statement:"not a * b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a / b",
  statement:"not a / b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a % b",
  statement:"not a % b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a is boolean",
  statement:"not a is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not a is not boolean",
  statement:"not a is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b intersect c",
  statement:"a < b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b intersect all c",
  statement:"a < b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b except c",
  statement:"a < b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b except all c",
  statement:"a < b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b union c",
  statement:"a < b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b union all c",
  statement:"a < b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b or c",
  statement:"a < b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b and c",
  statement:"a < b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b = c",
  statement:"a < b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b <> c",
  statement:"a < b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b in c",
  statement:"a < b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b not in c",
  statement:"a < b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b <= c",
  statement:"a < b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b > c",
  statement:"a < b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b >= c",
  statement:"a < b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b between w and c",
  statement:"a < b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b not between y and c",
  statement:"a < b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b like c",
  statement:"a < b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b not like c",
  statement:"a < b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b + c",
  statement:"a < b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b - c",
  statement:"a < b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b || c",
  statement:"a < b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b * c",
  statement:"a < b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b / c",
  statement:"a < b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b % c",
  statement:"a < b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b is boolean",
  statement:"a < b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a < b is not boolean",
  statement:"a < b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b intersect c",
  statement:"a except all b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b intersect all c",
  statement:"a except all b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b except c",
  statement:"a except all b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b union c",
  statement:"a except all b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b union all c",
  statement:"a except all b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b and c",
  statement:"a except all b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b or c",
  statement:"a except all b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b = c",
  statement:"a except all b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b <> c",
  statement:"a except all b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b in c",
  statement:"a except all b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b not in c",
  statement:"a except all b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b < c",
  statement:"a except all b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b <= c",
  statement:"a except all b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b > c",
  statement:"a except all b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b >= c",
  statement:"a except all b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b between w and c",
  statement:"a except all b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b not between y and c",
  statement:"a except all b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b like c",
  statement:"a except all b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b not like c",
  statement:"a except all b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b + c",
  statement:"a except all b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b - c",
  statement:"a except all b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b || c",
  statement:"a except all b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b * c",
  statement:"a except all b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b / c",
  statement:"a except all b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b % c",
  statement:"a except all b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b is boolean",
  statement:"a except all b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a except all b is not boolean",
  statement:"a except all b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b intersect c",
  statement:"a - b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b intersect all c",
  statement:"a - b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b except c",
  statement:"a - b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b except all c",
  statement:"a - b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b union c",
  statement:"a - b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b union all c",
  statement:"a - b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b or c",
  statement:"a - b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b and c",
  statement:"a - b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b = c",
  statement:"a - b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b <> c",
  statement:"a - b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b in c",
  statement:"a - b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b not in c",
  statement:"a - b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b < c",
  statement:"a - b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b <= c",
  statement:"a - b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b > c",
  statement:"a - b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b >= c",
  statement:"a - b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b between w and c",
  statement:"a - b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b not between y and c",
  statement:"a - b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b like c",
  statement:"a - b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b not like c",
  statement:"a - b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b + c",
  statement:"a - b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b || c",
  statement:"a - b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b * c",
  statement:"a - b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b / c",
  statement:"a - b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b % c",
  statement:"a - b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b is boolean",
  statement:"a - b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a - b is not boolean",
  statement:"a - b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b intersect c",
  statement:"a not in b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b intersect all c",
  statement:"a not in b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b except c",
  statement:"a not in b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b except all c",
  statement:"a not in b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b union c",
  statement:"a not in b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b union all c",
  statement:"a not in b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b or c",
  statement:"a not in b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b and c",
  statement:"a not in b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b = c",
  statement:"a not in b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b <> c",
  statement:"a not in b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b in c",
  statement:"a not in b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b + c",
  statement:"a not in b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b - c",
  statement:"a not in b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b || c",
  statement:"a not in b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b * c",
  statement:"a not in b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b / c",
  statement:"a not in b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b % c",
  statement:"a not in b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b is boolean",
  statement:"a not in b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a not in b is not boolean",
  statement:"a not in b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean intersect c",
  statement:"a is not boolean intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean intersect all c",
  statement:"a is not boolean intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean except c",
  statement:"a is not boolean except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean union c",
  statement:"a is not boolean union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean union all c",
  statement:"a is not boolean union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean or c",
  statement:"a is not boolean or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean and c",
  statement:"a is not boolean and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean = c",
  statement:"a is not boolean = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean <> c",
  statement:"a is not boolean <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean in c",
  statement:"a is not boolean in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean not in c",
  statement:"a is not boolean not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean < c",
  statement:"a is not boolean < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean <= c",
  statement:"a is not boolean <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean > c",
  statement:"a is not boolean > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean >= c",
  statement:"a is not boolean >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean between w and c",
  statement:"a is not boolean between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean not between y and c",
  statement:"a is not boolean not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean like c",
  statement:"a is not boolean like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean not like c",
  statement:"a is not boolean not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a is not boolean is boolean",
  statement:"a is not boolean is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b intersect c",
  statement:"a and b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b intersect all c",
  statement:"a and b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b except c",
  statement:"a and b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b except all c",
  statement:"a and b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b union c",
  statement:"a and b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b union all c",
  statement:"a and b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b or c",
  statement:"a and b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b = c",
  statement:"a and b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b <> c",
  statement:"a and b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b in c",
  statement:"a and b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b not in c",
  statement:"a and b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b < c",
  statement:"a and b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b <= c",
  statement:"a and b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b > c",
  statement:"a and b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b >= c",
  statement:"a and b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b between w and c",
  statement:"a and b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b not between y and c",
  statement:"a and b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b like c",
  statement:"a and b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b not like c",
  statement:"a and b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b + c",
  statement:"a and b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b - c",
  statement:"a and b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b || c",
  statement:"a and b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b * c",
  statement:"a and b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b / c",
  statement:"a and b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b % c",
  statement:"a and b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b is boolean",
  statement:"a and b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a and b is not boolean",
  statement:"a and b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b intersect c",
  statement:"a <= b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b intersect all c",
  statement:"a <= b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b except c",
  statement:"a <= b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b except all c",
  statement:"a <= b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b union c",
  statement:"a <= b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b union all c",
  statement:"a <= b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b or c",
  statement:"a <= b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b and c",
  statement:"a <= b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b = c",
  statement:"a <= b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b <> c",
  statement:"a <= b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b in c",
  statement:"a <= b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b not in c",
  statement:"a <= b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b < c",
  statement:"a <= b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b > c",
  statement:"a <= b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b >= c",
  statement:"a <= b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b between w and c",
  statement:"a <= b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b not between y and c",
  statement:"a <= b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b like c",
  statement:"a <= b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b not like c",
  statement:"a <= b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b + c",
  statement:"a <= b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b - c",
  statement:"a <= b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b || c",
  statement:"a <= b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b * c",
  statement:"a <= b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b / c",
  statement:"a <= b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b % c",
  statement:"a <= b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b is boolean",
  statement:"a <= b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a <= b is not boolean",
  statement:"a <= b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b intersect c",
  statement:"a || b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b intersect all c",
  statement:"a || b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b except c",
  statement:"a || b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b except all c",
  statement:"a || b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b union c",
  statement:"a || b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b union all c",
  statement:"a || b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b or c",
  statement:"a || b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b and c",
  statement:"a || b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b = c",
  statement:"a || b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b <> c",
  statement:"a || b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b in c",
  statement:"a || b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b not in c",
  statement:"a || b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b < c",
  statement:"a || b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b <= c",
  statement:"a || b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b > c",
  statement:"a || b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b >= c",
  statement:"a || b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b between w and c",
  statement:"a || b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b not between y and c",
  statement:"a || b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b like c",
  statement:"a || b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b not like c",
  statement:"a || b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b * c",
  statement:"a || b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b / c",
  statement:"a || b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b % c",
  statement:"a || b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b is boolean",
  statement:"a || b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a || b is not boolean",
  statement:"a || b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b intersect c",
  statement:"a * b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b intersect all c",
  statement:"a * b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b except c",
  statement:"a * b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b except all c",
  statement:"a * b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b union c",
  statement:"a * b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b union all c",
  statement:"a * b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b or c",
  statement:"a * b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b and c",
  statement:"a * b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b = c",
  statement:"a * b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b <> c",
  statement:"a * b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b in c",
  statement:"a * b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b not in c",
  statement:"a * b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b < c",
  statement:"a * b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b <= c",
  statement:"a * b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b > c",
  statement:"a * b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b >= c",
  statement:"a * b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b between w and c",
  statement:"a * b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b not between y and c",
  statement:"a * b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b like c",
  statement:"a * b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b not like c",
  statement:"a * b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b + c",
  statement:"a * b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b - c",
  statement:"a * b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b || c",
  statement:"a * b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b / c",
  statement:"a * b / c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b % c",
  statement:"a * b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b is boolean",
  statement:"a * b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a * b is not boolean",
  statement:"a * b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b intersect c",
  statement:"a / b intersect c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b intersect all c",
  statement:"a / b intersect all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b except c",
  statement:"a / b except c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b except all c",
  statement:"a / b except all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b union c",
  statement:"a / b union c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b union all c",
  statement:"a / b union all c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b or c",
  statement:"a / b or c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b and c",
  statement:"a / b and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b = c",
  statement:"a / b = c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b <> c",
  statement:"a / b <> c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b in c",
  statement:"a / b in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b not in c",
  statement:"a / b not in c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b < c",
  statement:"a / b < c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b <= c",
  statement:"a / b <= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b > c",
  statement:"a / b > c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b >= c",
  statement:"a / b >= c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b between w and c",
  statement:"a / b between w and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b not between y and c",
  statement:"a / b not between y and c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b like c",
  statement:"a / b like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b not like c",
  statement:"a / b not like c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b + c",
  statement:"a / b + c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b - c",
  statement:"a / b - c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b || c",
  statement:"a / b || c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b * c",
  statement:"a / b * c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b % c",
  statement:"a / b % c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b is boolean",
  statement:"a / b is boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a / b is not boolean",
  statement:"a / b is not boolean",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"f() IS NOT VARCHAR(200)",
  statement:"f() IS NOT VARCHAR(200)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"current_user",
  statement:"current_user",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(1.123 AS RS_INTEGER)",
  statement:"CAST(1.123 AS RS_INTEGER)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"mIsSiNg IS MISSING",
  statement:"mIsSiNg IS MISSING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM table1 AS val AT ord BY uid",
  statement:"SELECT * FROM table1 AS val AT ord BY uid",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(a AS DECIMAL(1))",
  statement:"CAST(a AS DECIMAL(1))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"{'a':{}}",
  statement:"{'a':{}}",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"not 1",
  statement:"not 1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1 ASC, rk2 DESC",
  statement:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1 ASC, rk2 DESC",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(TRUE AS ES_BOOLEAN)",
  statement:"CAST(TRUE AS ES_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE b ESCAPE '\\'",
  statement:"a LIKE b ESCAPE '\\'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER INTERSECT b",
  statement:"a OUTER INTERSECT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"foobar(1, 2)",
  statement:"foobar(1, 2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ord FROM UNPIVOT item AS val AT name",
  statement:"SELECT ord FROM UNPIVOT item AS val AT name",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"list(a, 5)",
  statement:"list(a, 5)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a LIMIT 7 OFFSET 5",
  statement:"SELECT x FROM a LIMIT 7 OFFSET 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET foo() AS A",
  statement:"SELECT x FROM table1 LET foo() AS A",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"missing",
  statement:"missing",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(timezone_minute from a)",
  statement:"extract(timezone_minute from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a[5]['b'][(a + 3)]",
  statement:"a[5]['b'][(a + 3)]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"+-baz()",
  statement:"+-baz()",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1 DESC",
  statement:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1 DESC",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT g FROM data GROUP PARTIAL BY a AS x, b + c AS y, foo(d) AS z GROUP AS g",
  statement:"SELECT g FROM data GROUP PARTIAL BY a AS x, b + c AS y, foo(d) AS z GROUP AS g",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"substring('test', 100)",
  statement:"substring('test', 100)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE b ESCAPE c",
  statement:"a LIKE b ESCAPE c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SEXP(a, 5, (b + 6))",
  statement:"SEXP(a, 5, (b + 6))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(month, a, b)",
  statement:"date_add(month, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 desc, rk2 asc, rk3 asc, rk4 desc",
  statement:"SELECT x FROM tb ORDER BY rk1 desc, rk2 asc, rk3 asc, rk4 desc",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET foo(table1) AS A",
  statement:"SELECT x FROM table1 LET foo(table1) AS A",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 < > 2",
  statement:"1 < > 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"excluded",
  statement:"excluded",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM table1",
  statement:"SELECT * FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"PIVOT g AT ('prefix:' || c) FROM data WHERE a = b GROUP BY c, d GROUP AS g HAVING d > 6",
  statement:"PIVOT g AT ('prefix:' || c) FROM data WHERE a = b GROUP BY c, d GROUP AS g HAVING d > 6",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER UNION DISTINCT b",
  statement:"a OUTER UNION DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER INTERSECT DISTINCT b",
  statement:"a OUTER INTERSECT DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.b",
  statement:"a.b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"<<<<1>>>>",
  statement:"<<<<1>>>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1",
  statement:"SELECT x FROM tb ORDER BY rk1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DROP TABLE \"user\"",
  statement:"DROP TABLE \"user\"",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CURRENT_USER",
  statement:"CURRENT_USER",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 desc NULLS FIRST, rk2 desc NULLS LAST",
  statement:"SELECT x FROM tb ORDER BY rk1 desc NULLS FIRST, rk2 desc NULLS LAST",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"substring('test' from 100 for 50)",
  statement:"substring('test' from 100 for 50)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"?",
  statement:"?",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"< < < < 1 > > > >",
  statement:"< < < < 1 > > > >",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(a AS NUMERIC(1, 2))",
  statement:"CAST(a AS NUMERIC(1, 2))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE name WHEN 'zoe' THEN 1 ELSE 0 END",
  statement:"CASE name WHEN 'zoe' THEN 1 ELSE 0 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a EXCEPT b",
  statement:"a EXCEPT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"null IS NOT NULL",
  statement:"null IS NOT NULL",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"mY_fUnCtIoN(a)",
  statement:"mY_fUnCtIoN(a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 asc",
  statement:"SELECT x FROM tb ORDER BY rk1 asc",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"VALUES (1), (2), (3)",
  statement:"VALUES (1), (2), (3)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 <> 2",
  statement:"1 <> 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"trim(' ' from 'test')",
  statement:"trim(' ' from 'test')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET foo(42, 'bar') AS A",
  statement:"SELECT x FROM table1 LET foo(42, 'bar') AS A",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET table1 AS A",
  statement:"SELECT x FROM table1 LET table1 AS A",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a[5]",
  statement:"a[5]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"5",
  statement:"5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"substring('test', 100, 50)",
  statement:"substring('test', 100, 50)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"foobar()",
  statement:"foobar()",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER UNION ALL b",
  statement:"a OUTER UNION ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIME(3) WITH TIME ZONE",
  statement:"t1 IS TIME(3) WITH TIME ZONE",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT VALUE v FROM table1 AS v",
  statement:"SELECT VALUE v FROM table1 AS v",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER EXCEPT ALL b",
  statement:"a OUTER EXCEPT ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a EXCEPT DISTINCT b",
  statement:"a EXCEPT DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM data HAVING a = b",
  statement:"SELECT a FROM data HAVING a = b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE WHEN name = 'zoe' THEN 1 ELSE 0 END",
  statement:"CASE WHEN name = 'zoe' THEN 1 ELSE 0 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(a AS DECIMAL)",
  statement:"CAST(a AS DECIMAL)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT t.* FROM table1 AS t",
  statement:"SELECT t.* FROM table1 AS t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ALL VALUE v FROM table1 AS v",
  statement:"SELECT ALL VALUE v FROM table1 AS v",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1, rk2, rk3, rk4",
  statement:"SELECT x FROM tb ORDER BY rk1, rk2, rk3, rk4",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CREATE INDEX ON \"user\" (\"group\")",
  statement:"CREATE INDEX ON \"user\" (\"group\")",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"LIST(a, 5, (b + 6))",
  statement:"LIST(a, 5, (b + 6))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  statement:"SELECT * EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"+-+-+-`-5e0`",
  statement:"+-+-+-`-5e0`",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(5 AS VARCHAR)",
  statement:"CAST(5 AS VARCHAR)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(timezone_hour, a, b)",
  statement:"date_add(timezone_hour, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a WHERE y = 10 LIMIT 7 OFFSET 5",
  statement:"SELECT x FROM a WHERE y = 10 LIMIT 7 OFFSET 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CURRENT_user",
  statement:"CURRENT_user",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIME WITH TIME ZONE",
  statement:"t1 IS TIME WITH TIME ZONE",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a, b FROM table1 as t1, table2 WHERE f(t1)",
  statement:"SELECT a, b FROM table1 as t1, table2 WHERE f(t1)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(minute from a)",
  statement:"extract(minute from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"[a, 5, (b + 6)]",
  statement:"[a, 5, (b + 6)]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIMESTAMP",
  statement:"t1 IS TIMESTAMP",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DROP INDEX bar ON foo",
  statement:"DROP INDEX bar ON foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DROP TABLE foo",
  statement:"DROP TABLE foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 !/* some comment*/= 2",
  statement:"1 !/* some comment*/= 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CREATE INDEX ON foo (x, y.z)",
  statement:"CREATE INDEX ON foo (x, y.z)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CREATE TABLE foo",
  statement:"CREATE TABLE foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"+(-baz())",
  statement:"+(-baz())",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"5 BETWEEN 1 AND 10",
  statement:"5 BETWEEN 1 AND 10",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 ! = 2",
  statement:"1 ! = 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM (SELECT * FROM x).a",
  statement:"SELECT * FROM (SELECT * FROM x).a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(second from a)",
  statement:"extract(second from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x, y, z EXCLUDE t.a, t.b, t.c FROM t",
  statement:"SELECT x, y, z EXCLUDE t.a, t.b, t.c FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.b.c.d",
  statement:"a.b.c.d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 desc",
  statement:"SELECT x FROM tb ORDER BY rk1 desc",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a NOT LIKE '_AAA%'",
  statement:"a NOT LIKE '_AAA%'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"sexp(a, 5)",
  statement:"sexp(a, 5)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"kumo",
  statement:"kumo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a OFFSET 5",
  statement:"SELECT x FROM a OFFSET 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a UNION ALL b",
  statement:"a UNION ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.b.c",
  statement:"a.b.c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 & 2",
  statement:"1 & 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a a1, b b1 FROM table1 t1, table2 WHERE f(t1)",
  statement:"SELECT a a1, b b1 FROM table1 t1, table2 WHERE f(t1)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"-1",
  statement:"-1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"</* some comment */<<<1>>>>",
  statement:"</* some comment */<<<1>>>>",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1, rk2, rk3",
  statement:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1, rk2, rk3",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t.a.b.c, t.d.e, FROM t",
  statement:"SELECT * EXCLUDE t.a.b.c, t.d.e, FROM t",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"trim('test')",
  statement:"trim('test')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"COUNT(*)",
  statement:"COUNT(*)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIMESTAMP WITH TIME ZONE",
  statement:"t1 IS TIMESTAMP WITH TIME ZONE",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE name WHEN 'zoe' THEN 1 WHEN 'kumo' THEN 2 WHEN 'mary' THEN 3 ELSE 0 END",
  statement:"CASE name WHEN 'zoe' THEN 1 WHEN 'kumo' THEN 2 WHEN 'mary' THEN 3 ELSE 0 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ALL * FROM table1",
  statement:"SELECT ALL * FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.b[*]",
  statement:"a.b[*]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(a AS NUMERIC)",
  statement:"CAST(a AS NUMERIC)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(5 AS VARCHAR(5))",
  statement:"CAST(5 AS VARCHAR(5))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"foobar(5, 6, a)",
  statement:"foobar(5, 6, a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE b",
  statement:"a LIKE b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.name LIKE b.pattern",
  statement:"a.name LIKE b.pattern",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"VALUES (1, 2), (3, 4)",
  statement:"VALUES (1, 2), (3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(timezone_minute, a, b)",
  statement:"date_add(timezone_minute, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a INTERSECT DISTINCT b",
  statement:"a INTERSECT DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE '_AAA%' ESCAPE '['",
  statement:"a LIKE '_AAA%' ESCAPE '['",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:" \"a\".\"b\" ",
  statement:" \"a\".\"b\" ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM data GROUP BY a",
  statement:"SELECT a FROM data GROUP BY a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIMESTAMP(3) WITH TIME ZONE",
  statement:"t1 IS TIMESTAMP(3) WITH TIME ZONE",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a[*]",
  statement:"a[*]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(hour from a)",
  statement:"extract(hour from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(year from a)",
  statement:"extract(year from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM table1, table2",
  statement:"SELECT a FROM table1, table2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM table1, table2, table3",
  statement:"SELECT a FROM table1, table2, table3",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE name WHEN 'zoe' THEN 1 END",
  statement:"CASE name WHEN 'zoe' THEN 1 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a UNION b",
  statement:"a UNION b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"@excluded",
  statement:"@excluded",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a INTERSECT ALL b",
  statement:"a INTERSECT ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"null",
  statement:"null",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(timezone_hour from a)",
  statement:"extract(timezone_hour from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM a LIMIT 10",
  statement:"SELECT * FROM a LIMIT 10",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIME(3)",
  statement:"t1 IS TIME(3)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE '_AAA%'",
  statement:"a LIKE '_AAA%'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ord FROM UNPIVOT item AS val",
  statement:"SELECT ord FROM UNPIVOT item AS val",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ord FROM UNPIVOT item AT name",
  statement:"SELECT ord FROM UNPIVOT item AT name",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"COUNT(DISTINCT a)",
  statement:"COUNT(DISTINCT a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a UNION DISTINCT b",
  statement:"a UNION DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM a WHERE a = 5 LIMIT 10",
  statement:"SELECT * FROM a WHERE a = 5 LIMIT 10",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 NULLS LAST",
  statement:"SELECT x FROM tb ORDER BY rk1 NULLS LAST",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER EXCEPT DISTINCT b",
  statement:"a OUTER EXCEPT DISTINCT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT sum(a) + count(*), AVG(b), MIN(c), MAX(d + e) FROM foo",
  statement:"SELECT sum(a) + count(*), AVG(b), MIN(c), MAX(d + e) FROM foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"[a, 5]",
  statement:"[a, 5]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a INTERSECT b",
  statement:"a INTERSECT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(a).b",
  statement:"(a).b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(a AS DECIMAL(1, 2))",
  statement:"CAST(a AS DECIMAL(1, 2))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t FROM t",
  statement:"SELECT * EXCLUDE t FROM t",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"t1 IS TIMESTAMP(3)",
  statement:"t1 IS TIMESTAMP(3)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM data WHERE a = b HAVING c = d",
  statement:"SELECT a FROM data WHERE a = b HAVING c = d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t.a[x + y] FROM t",
  statement:"SELECT * EXCLUDE t.a[x + y] FROM t",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT a FROM table1",
  statement:"SELECT a FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"mIsSiNg IS NOT MISSING",
  statement:"mIsSiNg IS NOT MISSING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM <<1>>;",
  statement:"SELECT * FROM <<1>>;",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE WHEN name = 'zoe' THEN 1 WHEN name > 'kumo' THEN 2 ELSE 0 END",
  statement:"CASE WHEN name = 'zoe' THEN 1 WHEN name > 'kumo' THEN 2 ELSE 0 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"[[]]",
  statement:"[[]]",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"<<<<>>>>",
  statement:"<<<<>>>>",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"COUNT(a)",
  statement:"COUNT(a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER INTERSECT ALL b",
  statement:"a OUTER INTERSECT ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t.a, t.b, t.c FROM t",
  statement:"SELECT * EXCLUDE t.a, t.b, t.c FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM (SELECT * FROM x WHERE b).a",
  statement:"SELECT * FROM (SELECT * FROM x WHERE b).a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"x.a[*].b",
  statement:"x.a[*].b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 desc NULLS FIRST, rk2 asc NULLS LAST, rk3 desc NULLS LAST, rk4 asc NULLS FIRST",
  statement:"SELECT x FROM tb ORDER BY rk1 desc NULLS FIRST, rk2 asc NULLS LAST, rk3 desc NULLS LAST, rk4 asc NULLS FIRST",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT g FROM data WHERE a = b GROUP BY c, d GROUP AS g HAVING d > 6",
  statement:"SELECT g FROM data WHERE a = b GROUP BY c, d GROUP AS g HAVING d > 6",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT DISTINCT * FROM table1",
  statement:"SELECT DISTINCT * FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"\"kumo\"",
  statement:"\"kumo\"",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT VALUE { 'x': 1, 'y': 2, 'z': 3 } EXCLUDE t.a, t.b, t.c FROM t",
  statement:"SELECT VALUE { 'x': 1, 'y': 2, 'z': 3 } EXCLUDE t.a, t.b, t.c FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a.b.* FROM table1 AS t",
  statement:"SELECT a.b.* FROM table1 AS t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"31 & 15 & 7 & 3 & 1",
  statement:"31 & 15 & 7 & 3 & 1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1",
  statement:"SELECT a FROM tb WHERE hk = 1 ORDER BY rk1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(a AS NUMERIC(1))",
  statement:"CAST(a AS NUMERIC(1))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"trim(both from 'test')",
  statement:"trim(both from 'test')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"foobar(1)",
  statement:"foobar(1)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CREATE TABLE \"user\" (\"lastname\" string)",
  statement:"CREATE TABLE \"user\" (\"lastname\" string)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(minute, a, b)",
  statement:"date_add(minute, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ?, f.a from foo f where f.bar = ? and f.spam = 'eggs' and f.baz = ?",
  statement:"SELECT ?, f.a from foo f where f.bar = ? and f.spam = 'eggs' and f.baz = ?",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT DISTINCT VALUE v FROM table1 AS v",
  statement:"SELECT DISTINCT VALUE v FROM table1 AS v",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SUM(DISTINCT a)",
  statement:"SUM(DISTINCT a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"+-`2017-01-01`",
  statement:"+-`2017-01-01`",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a FROM stuff WHERE b IS MISSING",
  statement:"SELECT a FROM stuff WHERE b IS MISSING",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.b.*",
  statement:"a.b.*",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM table1 AS t BY uid",
  statement:"SELECT * FROM table1 AS t BY uid",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM table1 AT ord BY uid",
  statement:"SELECT * FROM table1 AT ord BY uid",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"t1 IS TIME",
  statement:"t1 IS TIME",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"trim(leading from 'test')",
  statement:"trim(leading from 'test')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(second, a, b)",
  statement:"date_add(second, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"5 NOT BETWEEN 1 AND 10",
  statement:"5 NOT BETWEEN 1 AND 10",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 </* some comment*/> 2",
  statement:"1 </* some comment*/> 2",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"a NOT IN (1, 2, 3, 4)",
  statement:"a NOT IN (1, 2, 3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.\"b\"",
  statement:"a.\"b\"",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DROP INDEX \"bar\" ON \"foo\"",
  statement:"DROP INDEX \"bar\" ON \"foo\"",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CASE WHEN name = 'zoe' THEN 1 END",
  statement:"CASE WHEN name = 'zoe' THEN 1 END",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT VALUE { 'x': 1, 'y': 2, 'z': 3 } EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  statement:"SELECT VALUE { 'x': 1, 'y': 2, 'z': 3 } EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a EXCEPT ALL b",
  statement:"a EXCEPT ALL b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"'username' || current_user",
  statement:"'username' || current_user",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"substring('test' from 100)",
  statement:"substring('test' from 100)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 NULLS FIRST",
  statement:"SELECT x FROM tb ORDER BY rk1 NULLS FIRST",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"((1, 2), (3, 4))",
  statement:"((1, 2), (3, 4))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(hour, a, b)",
  statement:"date_add(hour, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"date_add(year, a, b)",
  statement:"date_add(year, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ord, val FROM table1 AS val AT ord",
  statement:"SELECT ord, val FROM table1 AS val AT ord",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"PIVOT v AT n FROM data",
  statement:"PIVOT v AT n FROM data",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM a ORDER BY y DESC LIMIT 10 OFFSET 5",
  statement:"SELECT x FROM a ORDER BY y DESC LIMIT 10 OFFSET 5",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(month from a)",
  statement:"extract(month from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"null IS NULL",
  statement:"null IS NULL",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"@a",
  statement:"@a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"trim(trailing from 'test')",
  statement:"trim(trailing from 'test')",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET 1 AS A",
  statement:"SELECT x FROM table1 LET 1 AS A",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM tb ORDER BY rk1 asc NULLS FIRST, rk2 asc NULLS LAST",
  statement:"SELECT x FROM tb ORDER BY rk1 asc NULLS FIRST, rk2 asc NULLS LAST",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT VALUE a FROM table1",
  statement:"SELECT VALUE a FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER UNION b",
  statement:"a OUTER UNION b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(1, 2, 3, 4)",
  statement:"(1, 2, 3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"f() IS VARCHAR(200)",
  statement:"f() IS VARCHAR(200)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CREATE TABLE foo (boo string)",
  statement:"CREATE TABLE foo (boo string)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"(a, b) IN ((1, 2), (3, 4))",
  statement:"(a, b) IN ((1, 2), (3, 4))",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT DISTINCT a FROM table1",
  statement:"SELECT DISTINCT a FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a OUTER EXCEPT b",
  statement:"a OUTER EXCEPT b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"foo(x, y).a.*.b",
  statement:"foo(x, y).a.*.b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a IN (1, 2, 3, 4)",
  statement:"a IN (1, 2, 3, 4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"{'x':a, 'y':5 }",
  statement:"{'x':a, 'y':5 }",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"extract(day from a)",
  statement:"extract(day from a)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT process(t).a[0] AS a, t2.b AS b\n                   FROM t1.a AS t, t2.x.*.b\n                   WHERE test(t2.name, t1.name) AND t1.id = t2.id\n                ",
  statement:"SELECT process(t).a[0] AS a, t2.b AS b\n                   FROM t1.a AS t, t2.x.*.b\n                   WHERE test(t2.name, t1.name) AND t1.id = t2.id\n                ",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a LIKE b ESCAPE x.c",
  statement:"a LIKE b ESCAPE x.c",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"-baz()",
  statement:"-baz()",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"a.*",
  statement:"a.*",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 != 2",
  statement:"1 != 2",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM foo UNION SELECT * FROM bar",
  statement:"SELECT * FROM foo UNION SELECT * FROM bar",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"{'x':a, 'y':5, 'z':(b + 6)}",
  statement:"{'x':a, 'y':5, 'z':(b + 6)}",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x FROM table1 LET 1 AS A, 2 AS B",
  statement:"SELECT x FROM table1 LET 1 AS A, 2 AS B",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"@a.b",
  statement:"@a.b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"PIVOT v AT attr EXCLUDE t.a[*].b.c.*.d, t.foo.bar[*] FROM t",
  statement:"PIVOT v AT attr EXCLUDE t.a[*].b.c.*.d, t.foo.bar[*] FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT a + b FROM data GROUP BY a + b",
  statement:"SELECT a + b FROM data GROUP BY a + b",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE * FROM",
  statement:"SELECT * EXCLUDE * FROM",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT * FROM UNPIVOT item",
  statement:"SELECT * FROM UNPIVOT item",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT x, y, z EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  statement:"SELECT x, y, z EXCLUDE t.a.foo.bar, t.b[0].*[*].baz, t.c.d.*.e[*].f.* FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t FROM s, t",
  statement:"SELECT * EXCLUDE t FROM s, t",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"date_add(day, a, b)",
  statement:"date_add(day, a, b)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"1 = current_user",
  statement:"1 = current_user",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ord FROM table1 AT ord",
  statement:"SELECT ord FROM table1 AT ord",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * EXCLUDE t.a.\"b\".C['d'].\"E\" FROM t",
  statement:"SELECT * EXCLUDE t.a.\"b\".C['d'].\"E\" FROM t",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT ALL a FROM table1",
  statement:"SELECT ALL a FROM table1",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT * FROM table1 BY uid",
  statement:"SELECT * FROM table1 BY uid",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT LEAD(a,2,null) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LEAD(a,2,null) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT lead(a) OVER () FROM b",
  statement:"SELECT lead(a) OVER () FROM b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT lead(a,b,c,d) OVER (ORDER BY e) FROM f",
  statement:"SELECT lead(a,b,c,d) OVER (ORDER BY e) FROM f",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT LAG(a) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LAG(a) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT lag(a) OVER () FROM b",
  statement:"SELECT lag(a) OVER () FROM b",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"SELECT LEAD(a) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LEAD(a) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT LAG(a,2,null) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LAG(a,2,null) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT LAG(a,2) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LAG(a,2) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT LEAD(a,2) OVER (PARTITION BY b ORDER BY c) FROM d",
  statement:"SELECT LEAD(a,2) OVER (PARTITION BY b ORDER BY c) FROM d",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT lag(a,b,c,d) OVER (ORDER BY e) FROM f",
  statement:"SELECT lag(a,b,c,d) OVER (ORDER BY e) FROM f",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"CAST(true as es_boolean)",
  statement:"CAST(true as es_boolean)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST(true as es_boolean)",
  statement:"CAN_CAST(true as es_boolean)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST(true as es_boolean)",
  statement:"CAN_LOSSLESS_CAST(true as es_boolean)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(1 as es_integer)",
  statement:"CAST(1 as es_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST(1 as es_integer)",
  statement:"CAN_CAST(1 as es_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST(1 as es_integer)",
  statement:"CAN_LOSSLESS_CAST(1 as es_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST(`1.2e0` as ES_FLOAT)",
  statement:"CAST(`1.2e0` as ES_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST(`1.2e0` as ES_FLOAT)",
  statement:"CAN_CAST(`1.2e0` as ES_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST(`1.2e0` as ES_FLOAT)",
  statement:"CAN_LOSSLESS_CAST(`1.2e0` as ES_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as ES_TEXT)",
  statement:"CAST('xyz' as ES_TEXT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as ES_TEXT)",
  statement:"CAN_CAST('xyz' as ES_TEXT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as ES_TEXT)",
  statement:"CAN_LOSSLESS_CAST('xyz' as ES_TEXT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_VARCHAR_MAX)",
  statement:"CAST('xyz' as RS_VARCHAR_MAX)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_VARCHAR_MAX)",
  statement:"CAN_CAST('xyz' as RS_VARCHAR_MAX)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_VARCHAR_MAX)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_VARCHAR_MAX)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_REAL)",
  statement:"CAST('xyz' as RS_REAL)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_REAL)",
  statement:"CAN_CAST('xyz' as RS_REAL)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_REAL)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_REAL)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_FLOAT4)",
  statement:"CAST('xyz' as RS_FLOAT4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_FLOAT4)",
  statement:"CAN_CAST('xyz' as RS_FLOAT4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_FLOAT4)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_FLOAT4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_DOUBLE_PRECISION)",
  statement:"CAST('xyz' as RS_DOUBLE_PRECISION)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_DOUBLE_PRECISION)",
  statement:"CAN_CAST('xyz' as RS_DOUBLE_PRECISION)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_DOUBLE_PRECISION)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_DOUBLE_PRECISION)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_FLOAT)",
  statement:"CAST('xyz' as RS_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_FLOAT)",
  statement:"CAN_CAST('xyz' as RS_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_FLOAT)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as rs_float8)",
  statement:"CAST('xyz' as rs_float8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as rs_float8)",
  statement:"CAN_CAST('xyz' as rs_float8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as rs_float8)",
  statement:"CAN_LOSSLESS_CAST('xyz' as rs_float8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_FLOAT)",
  statement:"CAST('xyz' as SPARK_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_FLOAT)",
  statement:"CAN_CAST('xyz' as SPARK_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_FLOAT)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_FLOAT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as int4)",
  statement:"CAST('xyz' as int4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as int4)",
  statement:"CAN_CAST('xyz' as int4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as int4)",
  statement:"CAN_LOSSLESS_CAST('xyz' as int4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as smallint)",
  statement:"CAST('xyz' as smallint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as smallint)",
  statement:"CAN_CAST('xyz' as smallint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as smallint)",
  statement:"CAN_LOSSLESS_CAST('xyz' as smallint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as integer2)",
  statement:"CAST('xyz' as integer2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as integer2)",
  statement:"CAN_CAST('xyz' as integer2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as integer2)",
  statement:"CAN_LOSSLESS_CAST('xyz' as integer2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as int2)",
  statement:"CAST('xyz' as int2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as int2)",
  statement:"CAN_CAST('xyz' as int2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as int2)",
  statement:"CAN_LOSSLESS_CAST('xyz' as int2)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as integer4)",
  statement:"CAST('xyz' as integer4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as integer4)",
  statement:"CAN_CAST('xyz' as integer4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as integer4)",
  statement:"CAN_LOSSLESS_CAST('xyz' as integer4)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as int8)",
  statement:"CAST('xyz' as int8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as int8)",
  statement:"CAN_CAST('xyz' as int8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as int8)",
  statement:"CAN_LOSSLESS_CAST('xyz' as int8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as integer8)",
  statement:"CAST('xyz' as integer8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as integer8)",
  statement:"CAN_CAST('xyz' as integer8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as integer8)",
  statement:"CAN_LOSSLESS_CAST('xyz' as integer8)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as bigint)",
  statement:"CAST('xyz' as bigint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as bigint)",
  statement:"CAN_CAST('xyz' as bigint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as bigint)",
  statement:"CAN_LOSSLESS_CAST('xyz' as bigint)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_SHORT)",
  statement:"CAST('xyz' as SPARK_SHORT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_SHORT)",
  statement:"CAN_CAST('xyz' as SPARK_SHORT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_SHORT)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_SHORT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_INTEGER)",
  statement:"CAST('xyz' as SPARK_INTEGER)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_INTEGER)",
  statement:"CAN_CAST('xyz' as SPARK_INTEGER)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_INTEGER)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_INTEGER)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_LONG)",
  statement:"CAST('xyz' as SPARK_LONG)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_LONG)",
  statement:"CAN_CAST('xyz' as SPARK_LONG)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_LONG)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_LONG)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_DOUBLE)",
  statement:"CAST('xyz' as SPARK_DOUBLE)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_DOUBLE)",
  statement:"CAN_CAST('xyz' as SPARK_DOUBLE)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_DOUBLE)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_DOUBLE)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as SPARK_BOOLEAN)",
  statement:"CAST('xyz' as SPARK_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as SPARK_BOOLEAN)",
  statement:"CAN_CAST('xyz' as SPARK_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as SPARK_BOOLEAN)",
  statement:"CAN_LOSSLESS_CAST('xyz' as SPARK_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_integer)",
  statement:"CAST('xyz' as RS_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_integer)",
  statement:"CAN_CAST('xyz' as RS_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_integer)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_integer)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_BIGINT)",
  statement:"CAST('xyz' as RS_BIGINT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_BIGINT)",
  statement:"CAN_CAST('xyz' as RS_BIGINT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_BIGINT)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_BIGINT)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAST('xyz' as RS_BOOLEAN)",
  statement:"CAST('xyz' as RS_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_CAST('xyz' as RS_BOOLEAN)",
  statement:"CAN_CAST('xyz' as RS_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CAN_LOSSLESS_CAST('xyz' as RS_BOOLEAN)",
  statement:"CAN_LOSSLESS_CAST('xyz' as RS_BOOLEAN)",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"CREATE TABLE foo.bar",
  statement:"CREATE TABLE foo.bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"DROP Table foo.bar",
  statement:"DROP Table foo.bar",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP",
  statement:"TIMESTAMP",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP 123",
  statement:"TIMESTAMP 123",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP 'timestamp_string'",
  statement:"TIMESTAMP 'timestamp_string'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP 123.23",
  statement:"TIMESTAMP 123.23",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP `2012-12-12`",
  statement:"TIMESTAMP `2012-12-12`",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2012-12-12'",
  statement:"TIMESTAMP '2012-12-12'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '12'",
  statement:"TIMESTAMP '12'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '12:30'",
  statement:"TIMESTAMP '12:30'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 34:59'",
  statement:"TIMESTAMP '2023-01-02 34:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2021-01-02 59.12345'",
  statement:"TIMESTAMP '2021-01-02 59.12345'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-01 1:30:38'",
  statement:"TIMESTAMP '2023-01-01 1:30:38'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 12:59:61.0000'",
  statement:"TIMESTAMP '2023-01-02 12:59:61.0000'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 12.123:45.123:54.123'",
  statement:"TIMESTAMP '2023-01-02 12.123:45.123:54.123'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 -19:45:13'",
  statement:"TIMESTAMP '2023-01-02 -19:45:13'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 24:00:00'",
  statement:"TIMESTAMP '2023-01-02 24:00:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 23:59:59.99999 05:30'",
  statement:"TIMESTAMP '2023-01-02 23:59:59.99999 05:30'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 23:59:59+05:30.00'",
  statement:"TIMESTAMP '2023-01-02 23:59:59+05:30.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 23:59:59+24:00'",
  statement:"TIMESTAMP '2023-01-02 23:59:59+24:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 23:59:59-24:00'",
  statement:"TIMESTAMP '2023-01-02 23:59:59-24:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 08:59:59.99999 AM'",
  statement:"TIMESTAMP '2023-01-02 08:59:59.99999 AM'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 08:59:59.99999 PM'",
  statement:"TIMESTAMP '2023-01-02 08:59:59.99999 PM'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP ( '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP ( '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP () '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP () '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP [4] '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP [4] '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP {4} '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP {4} '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP 4 '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP 4 '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP ('4') '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP ('4') '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP (-1) '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP (-1) '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP ('four') '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP ('four') '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE",
  statement:"TIMESTAMP WITH TIME ZONE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 12:20'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 12:20'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 34:59'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 34:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 59.12345'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 59.12345'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIMEZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH TIMEZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH_TIME_ZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH_TIME_ZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITHTIMEZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITHTIMEZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITHOUT TIME ZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITHOUT TIME ZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME PHONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH TIME PHONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH (4) TIME ZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH (4) TIME ZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME (4) ZONE '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH TIME (4) ZONE '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE (4) '2023-01-02 23:59:59.99999'",
  statement:"TIMESTAMP WITH TIME ZONE (4) '2023-01-02 23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE 'timestamp_string'",
  statement:"TIMESTAMP WITH TIME ZONE 'timestamp_string'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59+18:00.00'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59+18:00.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59-18:00.00'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59-18:00.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59+24:01'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59+24:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59-24:01'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59-24:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP ('4') WITH TIME ZONE '2023-01-02 23:59:59-24:01'",
  statement:"TIMESTAMP ('4') WITH TIME ZONE '2023-01-02 23:59:59-24:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59 PST'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59 PST'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02 23:59:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02TT23:59:59'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02TT23:59:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02T23:59:59Zz'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02T23:59:59Zz'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '02:30:59'",
  statement:"TIME '02:30:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (3) '12:59:31'",
  statement:"TIME (3) '12:59:31'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.9999'",
  statement:"TIME '23:59:59.9999'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (7) '23:59:59.123456789'",
  statement:"TIME (7) '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (9) '23:59:59.123456789'",
  statement:"TIME (9) '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) '23:59:59.123456789'",
  statement:"TIME (0) '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '02:30:59-05:30'",
  statement:"TIME '02:30:59-05:30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '02:30:59+05:30'",
  statement:"TIME '02:30:59+05:30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '02:30:59-14:39'",
  statement:"TIME '02:30:59-14:39'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '02:30:59+00:00'",
  statement:"TIME '02:30:59+00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '02:30:59-00:00'",
  statement:"TIME '02:30:59-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (3) '12:59:31+10:30'",
  statement:"TIME (3) '12:59:31+10:30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) '00:00:00+00:00'",
  statement:"TIME (0) '00:00:00+00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) '00:00:00-00:00'",
  statement:"TIME (0) '00:00:00-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.9999-11:59'",
  statement:"TIME '23:59:59.9999-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.99990-11:59'",
  statement:"TIME '23:59:59.99990-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (5) '23:59:59.9999-11:59'",
  statement:"TIME (5) '23:59:59.9999-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (7) '23:59:59.123456789+01:00'",
  statement:"TIME (7) '23:59:59.123456789+01:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (9) '23:59:59.123456789-14:50'",
  statement:"TIME (9) '23:59:59.123456789-14:50'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) '23:59:59.123456789-18:00'",
  statement:"TIME (0) '23:59:59.123456789-18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '02:30:59'",
  statement:"TIME WITH TIME ZONE '02:30:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (3) WITH TIME ZONE '12:59:31'",
  statement:"TIME (3) WITH TIME ZONE '12:59:31'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.9999'",
  statement:"TIME WITH TIME ZONE '23:59:59.9999'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (7) WITH TIME ZONE '23:59:59.123456789'",
  statement:"TIME (7) WITH TIME ZONE '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (9) WITH TIME ZONE '23:59:59.123456789'",
  statement:"TIME (9) WITH TIME ZONE '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) WITH TIME ZONE '23:59:59.123456789'",
  statement:"TIME (0) WITH TIME ZONE '23:59:59.123456789'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) WITH TIME ZONE '00:00:00+00:00'",
  statement:"TIME (0) WITH TIME ZONE '00:00:00+00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) WITH TIME ZONE '00:00:00.0000-00:00'",
  statement:"TIME (0) WITH TIME ZONE '00:00:00.0000-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '02:30:59.1234500-05:30'",
  statement:"TIME WITH TIME ZONE '02:30:59.1234500-05:30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '02:30:59+05:30'",
  statement:"TIME WITH TIME ZONE '02:30:59+05:30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '02:30:59-14:39'",
  statement:"TIME WITH TIME ZONE '02:30:59-14:39'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.9999-11:59'",
  statement:"TIME WITH TIME ZONE '23:59:59.9999-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.99990-11:59'",
  statement:"TIME WITH TIME ZONE '23:59:59.99990-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (5) WITH TIME ZONE '23:59:59.9999-11:59'",
  statement:"TIME (5) WITH TIME ZONE '23:59:59.9999-11:59'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (7) WITH TIME ZONE '23:59:59.123456789+01:00'",
  statement:"TIME (7) WITH TIME ZONE '23:59:59.123456789+01:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (9) WITH TIME ZONE '23:59:59.123456789-14:50'",
  statement:"TIME (9) WITH TIME ZONE '23:59:59.123456789-14:50'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME (0) WITH TIME ZONE '23:59:59.123456789-18:00'",
  statement:"TIME (0) WITH TIME ZONE '23:59:59.123456789-18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.1234567890'",
  statement:"TIME '23:59:59.1234567890'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.1234567899'",
  statement:"TIME '23:59:59.1234567899'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.1234567890+18:00'",
  statement:"TIME '23:59:59.1234567890+18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME '23:59:59.1234567899+18:00'",
  statement:"TIME '23:59:59.1234567899+18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.1234567890'",
  statement:"TIME WITH TIME ZONE '23:59:59.1234567890'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.1234567899'",
  statement:"TIME WITH TIME ZONE '23:59:59.1234567899'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.1234567890+18:00'",
  statement:"TIME WITH TIME ZONE '23:59:59.1234567890+18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59.1234567899+18:00'",
  statement:"TIME WITH TIME ZONE '23:59:59.1234567899+18:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DATE '2012-02-29'",
  statement:"DATE '2012-02-29'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DATE'1992-11-30'",
  statement:"DATE'1992-11-30'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DATE '9999-03-01'",
  statement:"DATE '9999-03-01'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DATE '0000-01-01'",
  statement:"DATE '0000-01-01'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"DATE '0000-02-29'",
  statement:"DATE '0000-02-29'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"SELECT DATE '2021-03-10' FROM foo",
  statement:"SELECT DATE '2021-03-10' FROM foo",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIME",
  statement:"TIME",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME 123",
  statement:"TIME 123",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME 'time_string'",
  statement:"TIME 'time_string'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME 123.23",
  statement:"TIME 123.23",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME `2012-12-12`",
  statement:"TIME `2012-12-12`",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '2012-12-12'",
  statement:"TIME '2012-12-12'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '12'",
  statement:"TIME '12'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '12:30'",
  statement:"TIME '12:30'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '34:59'",
  statement:"TIME '34:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '59.12345'",
  statement:"TIME '59.12345'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '1:30:38'",
  statement:"TIME '1:30:38'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '12:59:61.0000'",
  statement:"TIME '12:59:61.0000'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '12.123:45.123:54.123'",
  statement:"TIME '12.123:45.123:54.123'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '-19:45:13'",
  statement:"TIME '-19:45:13'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '24:00:00'",
  statement:"TIME '24:00:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '23:59:59.99999 05:30'",
  statement:"TIME '23:59:59.99999 05:30'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '23:59:59+05:30.00'",
  statement:"TIME '23:59:59+05:30.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '23:59:59+24:00'",
  statement:"TIME '23:59:59+24:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '23:59:59-24:00'",
  statement:"TIME '23:59:59-24:00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '08:59:59.99999 AM'",
  statement:"TIME '08:59:59.99999 AM'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME '08:59:59.99999 PM'",
  statement:"TIME '08:59:59.99999 PM'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME ( '23:59:59.99999'",
  statement:"TIME ( '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME () '23:59:59.99999'",
  statement:"TIME () '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME [4] '23:59:59.99999'",
  statement:"TIME [4] '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME {4} '23:59:59.99999'",
  statement:"TIME {4} '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME 4 '23:59:59.99999'",
  statement:"TIME 4 '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME ('4') '23:59:59.99999'",
  statement:"TIME ('4') '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME (-1) '23:59:59.99999'",
  statement:"TIME (-1) '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME (10) '23:59:59.99999'",
  statement:"TIME (10) '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME ('four') '23:59:59.99999'",
  statement:"TIME ('four') '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE",
  statement:"TIME WITH TIME ZONE",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '12:20'",
  statement:"TIME WITH TIME ZONE '12:20'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '34:59'",
  statement:"TIME WITH TIME ZONE '34:59'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '59.12345'",
  statement:"TIME WITH TIME ZONE '59.12345'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIMEZONE '23:59:59.99999'",
  statement:"TIME WITH TIMEZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH_TIME_ZONE '23:59:59.99999'",
  statement:"TIME WITH_TIME_ZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITHTIMEZONE '23:59:59.99999'",
  statement:"TIME WITHTIMEZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITHOUT TIME ZONE '23:59:59.99999'",
  statement:"TIME WITHOUT TIME ZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME PHONE '23:59:59.99999'",
  statement:"TIME WITH TIME PHONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH (4) TIME ZONE '23:59:59.99999'",
  statement:"TIME WITH (4) TIME ZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME (4) ZONE '23:59:59.99999'",
  statement:"TIME WITH TIME (4) ZONE '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE (4) '23:59:59.99999'",
  statement:"TIME WITH TIME ZONE (4) '23:59:59.99999'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE 'time_string'",
  statement:"TIME WITH TIME ZONE 'time_string'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59+18:00.00'",
  statement:"TIME WITH TIME ZONE '23:59:59+18:00.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59-18:00.00'",
  statement:"TIME WITH TIME ZONE '23:59:59-18:00.00'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59+18:01'",
  statement:"TIME WITH TIME ZONE '23:59:59+18:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59-18:01'",
  statement:"TIME WITH TIME ZONE '23:59:59-18:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME ('4') WITH TIME ZONE '23:59:59-18:01'",
  statement:"TIME ('4') WITH TIME ZONE '23:59:59-18:01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59-18-01'",
  statement:"TIME WITH TIME ZONE '23:59:59-18-01'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIME WITH TIME ZONE '23:59:59 PST'",
  statement:"TIME WITH TIME ZONE '23:59:59 PST'",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05'",
  statement:"TIMESTAMP '2023-01-02 03:04:05'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05.678'",
  statement:"TIMESTAMP '2023-01-02 03:04:05.678'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05.678901234567890'",
  statement:"TIMESTAMP '2023-01-02 03:04:05.678901234567890'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP(1) '2023-01-02 03:04:05.678901234567890'",
  statement:"TIMESTAMP(1) '2023-01-02 03:04:05.678901234567890'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05+06:07'",
  statement:"TIMESTAMP '2023-01-02 03:04:05+06:07'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05-06:07'",
  statement:"TIMESTAMP '2023-01-02 03:04:05-06:07'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05-00:00'",
  statement:"TIMESTAMP '2023-01-02 03:04:05-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02    03:04:05-00:00'",
  statement:"TIMESTAMP '2023-01-02    03:04:05-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02T03:04:05-00:00'",
  statement:"TIMESTAMP '2023-01-02T03:04:05-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02t03:04:05-00:00'",
  statement:"TIMESTAMP '2023-01-02t03:04:05-00:00'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05Z'",
  statement:"TIMESTAMP '2023-01-02 03:04:05Z'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02 03:04:05z'",
  statement:"TIMESTAMP '2023-01-02 03:04:05z'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02T03:04:05Z'",
  statement:"TIMESTAMP '2023-01-02T03:04:05Z'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP '2023-01-02t03:04:05z'",
  statement:"TIMESTAMP '2023-01-02t03:04:05z'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"TIMESTAMP WITH TIME ZONE '2023-01-02T03:04:05Z'",
  statement:"TIMESTAMP WITH TIME ZONE '2023-01-02T03:04:05Z'",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN a",
  statement:"EXPLAIN a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN (TYPE logical) a",
  statement:"EXPLAIN (TYPE logical) a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN (FORMAT ion_sexp) a",
  statement:"EXPLAIN (FORMAT ion_sexp) a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN (TYPE ast, FORMAT ion_sexp) a",
  statement:"EXPLAIN (TYPE ast, FORMAT ion_sexp) a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN (TypE aST, Format ion_SEXP) a",
  statement:"EXPLAIN (TypE aST, Format ion_SEXP) a",
  assert:[
    {
      result:SyntaxSuccess
    }
  ]
}
{
  name:"EXPLAIN (typ AST) a",
  statement:"EXPLAIN (typ AST) a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXPLAIN (TYPE ast, FORMAT ion_sexp)",
  statement:"EXPLAIN (TYPE ast, FORMAT ion_sexp)",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}
{
  name:"EXPLAIN (TYPE ast, TYPE logical) a",
  statement:"EXPLAIN (TYPE ast, TYPE logical) a",
  assert:[
    {
      result:SyntaxFail
    }
  ]
}